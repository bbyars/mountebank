<p>Let's create an HTTP imposter with multiple stubs:</p>

<testScenario name='http deepEquals example'>
    <step type='http'>
<pre><code>POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 4556,
  "protocol": "http",
  "stubs": [<strong class='highlight1'>
    {
      "responses": [{ "is": { "body": "first" } }],
      "predicates": [{
        "deepEquals": {
          "query": {}
        }
      }]
    }</strong>,<strong class='highlight2'>
    {
      "responses": [{ "is": { "body": "second" } }],
      "predicates": [{
        "deepEquals": {
          "query": {
            "first": "1"
          }
        }
      }]
    }</strong>,<strong class='highlight3'>
    {
      "responses": [{ "is": { "body": "third" } }],
      "predicates": [{
        "deepEquals": {
          "query": {
            "first": "1",
            "second": "2"
          }
        }
      }]
    }</strong>
  ]
}</code></pre>
    </step>

<p>The first predicate matches only a request without a querystring.</p>

    <step type='http'>
<pre><code>GET /test HTTP/1.1
Host: localhost:4556</code></pre>

        <assertResponse>
<pre><code>HTTP/1.1 200 OK
Connection: close
Date: <volatile>Thu, 09 Jan 2014 02:30:31 GMT</volatile>
Transfer-Encoding: chunked

<strong class='highlight1'>first</strong></code></pre>
        </assertResponse>
    </step>

<p>The second stub matches only if the exact querystring is sent.</p>

    <step type='http'>
<pre><code>GET /test?<strong class='highlight2'>First=1</strong> HTTP/1.1
Host: localhost:4556</code></pre>

        <assertResponse>
<pre><code>HTTP/1.1 200 OK
Connection: close
Date: <volatile>Thu, 09 Jan 2014 02:30:31 GMT</volatile>
Transfer-Encoding: chunked

<strong class='highlight2'>second</strong></code></pre>
        </assertResponse>
    </step>

<p>The third stub matches only if both query keys are sent.</p>

    <step type='http'>
<pre><code>GET /test?<strong class='highlight3'>Second=2&amp;First=1</strong> HTTP/1.1
Host: localhost:4556</code></pre>

        <assertResponse>
<pre><code>HTTP/1.1 200 OK
Connection: close
Date: <volatile>Thu, 09 Jan 2014 02:30:31 GMT</volatile>
Transfer-Encoding: chunked

<strong class='highlight3'>third</strong></code></pre>
        </assertResponse>
    </step>

<p>Any additional query parameters will trigger the default HTTP response.</p>

    <step type='http'>
<pre><code>GET /test?Second=2&amp;First=1&amp;Third=3 HTTP/1.1
Host: localhost:4556</code></pre>

        <assertResponse>
<pre><code>HTTP/1.1 200 OK
Connection: close
Date: <volatile>Thu, 09 Jan 2014 02:30:31 GMT</volatile>
Transfer-Encoding: chunked</code></pre>
        </assertResponse>
    </step>

    <step type='http'>
<code class='hidden' data-test-id='http deepEquals example'
                     data-test-step='6'
                     data-test-type='http'>
GET /imposters/4556 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>

        <assertResponse>
<code class='hidden'>HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Vary: Accept
Content-Type: application/json; charset=utf-8
Content-Length: <volatile>4672</volatile>
Date: <volatile>Sun, 26 Jan 2014 16:34:18 GMT</volatile>
Connection: keep-alive

{
  "protocol": "http",
  "port": 4556,
  "numberOfRequests": 4,
  "requests": [
    {
      "requestFrom": "<volatile>::ffff:127.0.0.1:60438</volatile>",
      "method": "GET",
      "path": "/test",
      "query": {},
      "headers": {
        "accept": "application/json",
        "Host": "localhost:4556",
        "Connection": "keep-alive"
      },
      "body": "",
      "timestamp": "<volatile>2014-01-26T16:34:18.022Z</volatile>"
    },
    {
      "requestFrom": "<volatile>::ffff:127.0.0.1:60449</volatile>",
      "method": "GET",
      "path": "/test",
      "query": { "First": "1" },
      "headers": {
        "accept": "application/json",
        "Host": "localhost:4556",
        "Connection": "keep-alive"
      },
      "body": "",
      "timestamp": "<volatile>2014-01-26T16:34:18.044Z</volatile>"
    },
    {
      "requestFrom": "<volatile>::ffff:127.0.0.1:60459</volatile>",
      "method": "GET",
      "path": "/test",
      "query": {
        "Second": "2",
        "First": "1"
      },
      "headers": {
        "accept": "application/json",
        "Host": "localhost:4556",
        "Connection": "keep-alive"
      },
      "body": "",
      "timestamp": "<volatile>2014-01-26T16:34:18.076Z</volatile>"
    },
    {
      "requestFrom": "<volatile>::ffff:127.0.0.1:60462</volatile>",
      "method": "GET",
      "path": "/test",
      "query": {
        "Second": "2",
        "First": "1",
        "Third": "3"
      },
      "headers": {
        "accept": "application/json",
        "Host": "localhost:4556",
        "Connection": "keep-alive"
      },
      "body": "",
      "timestamp": "<volatile>2014-01-26T16:34:18.080Z</volatile>"
    }
  ],
  "stubs": [
    {
      "responses": [{ "is": { "body": "first" } }],
      "predicates": [{ "deepEquals": { "query": {} } }],
      "matches": [
        {
          "timestamp": "<volatile>2014-01-26T16:34:18.336Z</volatile>",
          "request": {
            "requestFrom": "<volatile>::ffff:127.0.0.1:60438</volatile>",
            "method": "GET",
            "path": "/test",
            "query": {},
            "headers": {
              "accept": "application/json",
              "Host": "localhost:4556",
              "Connection": "keep-alive"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": { "Connection": "close" },
            "body": "first",
            "_mode": "text"
          }
        }
      ]
    },
    {
      "responses": [{ "is": { "body": "second" } }],
      "predicates": [{ "deepEquals": { "query": { "first": "1" } } }],
      "matches": [
        {
          "timestamp": "<volatile>2014-01-26T16:34:18.342Z</volatile>",
          "request": {
            "requestFrom": "<volatile>::ffff:127.0.0.1:60449</volatile>",
            "method": "GET",
            "path": "/test",
            "query": { "First": "1" },
            "headers": {
              "accept": "application/json",
              "Host": "localhost:4556",
              "Connection": "keep-alive"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": { "Connection": "close" },
            "body": "second",
            "_mode": "text"
          }
        }
      ]
    },
    {
      "responses": [{ "is": { "body": "third" } }],
      "predicates": [{
          "deepEquals": {
            "query": {
              "first": "1",
              "second": "2"
            }
          }
        }
      ],
      "matches": [
        {
          "timestamp": "<volatile>2014-01-26T16:34:18.345Z</volatile>",
          "request": {
            "requestFrom": "<volatile>::ffff:127.0.0.1:60459</volatile>",
            "method": "GET",
            "path": "/test",
            "query": {
              "Second": "2",
              "First": "1"
            },
            "headers": {
              "accept": "application/json",
              "Host": "localhost:4556",
              "Connection": "keep-alive"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": { "Connection": "close" },
            "body": "third",
            "_mode": "text"
          }
        }
      ]
    }
  ],
  "_links": {
    "self": { "href": "http://localhost:<%= port %>/imposters/4556" }
  }
}
</code>
        </assertResponse>
    </step>

    <step type='http'>
<code class='hidden'>DELETE /imposters/4556 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json</code>
    </step>
</testScenario>
