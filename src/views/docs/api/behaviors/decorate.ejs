<table>
  <tr>
    <th>Parameter</th>
    <th>Type</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>decorate</code></td>
    <td>A string</td>
    <td>The <code>decorate</code> function accepts the <code>request</code>, <code>response</code>,
        and the <code>logger</code>. It either changes the <code>response</code> directly and returns
        nothing, or returns a new <code>response</code> object. If you return a new <code>response</code>,
        all fields that you want included must be set; it will not be merged with the old <code>response</code>.

    <p class='warning-icon'>The <code><a href='/docs/commandLine'>--allowInjection</a></code> command
      line flag must be set to support this behavior.</p>
    </td>
  </tr>
</table>

<p>The <code>decorate</code> behavior is quite powerful, allowing nearly unlimited (synchronous) post-processing
of the response.  Since it relies on JavaScript injection, the <a href='/docs/commandLine'>--allowInjection</a>
flag must be passed in to <code>mb</code> on startup.</p>

<p>Here are a couple ideas of what to do with post-processing:</p>

<ul class='bullet-list'>
  <li><a href='#add-timestamp'>Add the current time to a response</a></li>
  <li><a href='#add-custom-header'>Add a custom header to a proxied response</a></li>
</ul>

<h3 id='add-timestamp'>Add the current time to a response</h3>

<p>Many people store static imposter files and load them via the <a href='/docs/commandLine'>--configfile</a>
command line switch.  The <code>decorate</code> behavior supports an elegant way of adding dynamic data
to the responses.  Let's add the current timestamp to each response.  We'll pass in a stringified version
of the following JavaScript function:</p>

<testScenario name='decorate'>
<pre><code>function (request, response) {
    var pad = function (number) {
            return (number &lt; 10) ? '0' + number : number.toString();
        },
        now = new Date(),
        time = pad(now.getHours()) + ':' + pad(now.getMinutes()) + ':' + pad(now.getSeconds());

    response.body = response.body.replace('${TIME}', time);
}</code></pre>

    <step type='http'>
<pre><code>POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 5545,
  "protocol": "http",
  "stubs": [
    {
      "responses": [
        {
          "is": {
            "body": "The time is <strong class='highlight1'>${TIME}</strong>"
          },
          "_behaviors": {
            "decorate": "function (request, response) { var pad = function (number) { return (number &lt; 10) ? '0' + number : number.toString(); }, now = new Date(), time = pad(now.getHours()) + ':' + pad(now.getMinutes()) + ':' + pad(now.getSeconds()); response.body = response.body.replace('${TIME}', time); }"
          }
        }
      ]
    }
  ]
}</code></pre>
    </step>

<p>Now we can call the imposter to get the current time.</p>

    <step type='http'>
<pre><code>GET / HTTP/1.1
Host: localhost:5545</code></pre>

        <assertResponse>
<pre><code>HTTP/1.1 200 OK
Connection: close
Date: <volatile>Thu, 01 Jan 2015 02:30:31 GMT</volatile>
Transfer-Encoding: chunked

The time is <volatile><strong class='highlight1'>16:43:02</strong></volatile></code></pre>
        </assertResponse>
    </step>

<h3 id='add-custom-header'>Add a custom header to a proxied response</h3>

<p><a href='/docs/api/proxies'>Proxying</a> provides considerable power out of the box.  However,
there are times where you need to augment the proxied response with something else to properly
simulate your testing scenario.  In this example, we'll proxy to the
<a href='#add-timestamp'>example above</a> (port 5545) that adds the current time to the response body.
We'll augment the proxied response with a custom header.  Here's the decorator function, passed
into the imposter creation as a string:</p>

<pre><code>function (request, response) {
    response.headers['X-Test'] = 'True';
}</code></pre>

    <step type='http'>
<pre><code>POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 7545,
  "protocol": "http",
  "stubs": [
    {
      "responses": [
        {
          "proxy": { "to": "http://localhost:5545" },
          "_behaviors": {
            "decorate": "function (request, response) { <strong class='highlight1'>response.headers['X-Test'] = 'True';</strong> }"
          }
        }
      ]
    }
  ]
}</code></pre>
    </step>

<p>Now we should get the custom header back:</p>

    <step type='http'>
<pre><code>GET /test HTTP/1.1
Host: localhost:7545</code></pre>

        <assertResponse>
<pre><code>HTTP/1.1 200 OK
Connection: close
Date: <volatile>Thu, 01 Jan 2015 02:30:31 GMT</volatile>
Transfer-Encoding: chunked
<strong class='highlight1'>X-Test: True</strong>

The time is <volatile>17:16:23</volatile></code></pre>
        </assertResponse>
    </step>

    <step type='http'>
<code class='hidden'>DELETE /imposters/5545 HTTP/1.1
Host: localhost:<%= port %></code>
    </step>

    <step type='http'>
<code class='hidden'>DELETE /imposters/7545 HTTP/1.1
Host: localhost:<%= port %></code>
    </step>
</testScenario>
