<table>
  <tr>
    <th>Parameter</th>
    <th>Type</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>repeat</code></td>
    <td>A positive, non-zero integer</td>
    <td>The number of times to repeat this response</td>
  </tr>
</table>

<p>The <code>repeat</code> behavior allows certain responses to return a certain number of times before
    moving on to the next reponse in the array. In the below example, the first response is configured to
    return 2 times before advancing to the second response:</p>

<testScenario name='repeat'>
    <step type='http'>
<pre><code>POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 7777,
  "protocol": "http",
  "stubs": [
    {
      "responses": [
        {
          "is": {
            "body": "This will repeat 2 times"
          },
          "_behaviors": {
            "repeat": 2
          }
        },
        {
          "is": {
            "body": "Then this will return"
          }
        }
      ]
    }
  ]
}</code></pre>
    </step>

<p>Now the first response will return 2 times before returning the second response.</p>

    <step type='http'>
<pre><code>GET / HTTP/1.1
Host: localhost:7777</code></pre>

        <assertResponse>
<pre><code>HTTP/1.1 200 OK
Connection: close
Date: <volatile>Thu, 01 Jan 2015 02:30:31 GMT</volatile>
Transfer-Encoding: chunked

This will repeat 2 times</code></pre>
        </assertResponse>
    </step>

    <step type='http'>
<pre><code>GET / HTTP/1.1
Host: localhost:7777</code></pre>

        <assertResponse>
<pre><code>HTTP/1.1 200 OK
Connection: close
Date: <volatile>Thu, 01 Jan 2015 02:30:31 GMT</volatile>
Transfer-Encoding: chunked

This will repeat 2 times</code></pre>
        </assertResponse>
    </step>

    <step type='http'>
<pre><code>GET / HTTP/1.1
Host: localhost:7777</code></pre>

        <assertResponse>
<pre><code>HTTP/1.1 200 OK
Connection: close
Date: <volatile>Thu, 01 Jan 2015 02:30:31 GMT</volatile>
Transfer-Encoding: chunked

Then this will return</code></pre>
        </assertResponse>
    </step>

    <step type='http'>
<code class='hidden'>DELETE /imposters/7777 HTTP/1.1
Host: localhost:<%= port %></code>
    </step>
</testScenario>
