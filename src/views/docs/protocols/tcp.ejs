<%
title = 'tcp'
description = 'The TCP protocol support provided by mountebank, which allows custom protocols'
%>

<% include ../../_header %>

<h1>tcp</h1>

<h2>Imposter Creation Parameters</h2>

<table>
  <tr>
    <th>Parameter</th>
    <th>Options</th>
    <th>Required?</th>
    <th>Default</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>protocol</code></td>
    <td><code>tcp</code></td>
    <td>Yes</td>
    <td>N/A</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><code>port</code></td>
    <td>Any valid port number</td>
    <td>No</td>
    <td>A randomly assigned port.  mountebank will return the actual value
    in the <code>POST</code> response.</td>
    <td>The port to run the imposter on.</td>
  </tr>
  <tr>
    <td><code>mode</code></td>
    <td><code>text</code> or <code>binary</code>.</td>
    <td>No</td>
    <td><code>text</code></td>
    <td>Defines the encoding used for request and response stings.  <code>text</code>
    strings will use utf8 encoding, and <code>binary</code> strings will use
    base64 encoding.  See examples on the <a href='/docs/api/predicates'>
    predicates</a> page.</td>
  </tr>
  <tr>
    <td><code>name</code></td>
    <td>Any string</td>
    <td>No</td>
    <td>empty string</td>
    <td>Included in the logs, useful when multiple imposters are set up.</td>
  </tr>
  <tr>
    <td><code>recordRequests</code></td>
    <td><code>true</code> or <code>false</code></td>
    <td>No</td>
    <td>false</td>
    <td>Adds <a href='/docs/api/mocks'>mock verification</a> support by remembering the requests
        made to this imposter.  Note that this represents a memory leak for any long running
        <code>mb</code> process, as requests are never forgotten.</td>
  </tr>
  <tr>
    <td><code>stubs</code></td>
    <td>A stub request.</td>
    <td>No</td>
    <td>An empty array</td>
    <td>The list of stubs responsible for matching a request and returning a response</td>
  </tr>
  <tr>
    <td><code>defaultResponse</code></td>
    <td>A valid response, see below for response fields</td>
    <td>No</td>
    <td><pre><code>
{ "data": "" }
    </code></pre>...which does not respond.</td>
    <td>The default response to send if no predicate matches. Also represents the default values
        that get merged into a response that doesn't specify every field</td>
  </tr>
  <tr>
    <td><code>endOfRequestResolver</code></td>
    <td><a href='#endOfRequestResolver'>See below</a></td>
    <td>No</td>
    <td>Assumes each packet represents a separate request.</td>
    <td>Determines if the request has finished or not, since this depends on the
      specific TCP protocol being used.  <a href='#endOfRequestResolver'>See below</a>
      for further explanation.</td>
  </tr>
</table>

<h2>TCP Requests</h2>

<table>
  <tr>
    <th>Field</th>
    <th>Descripion</th>
    <th>Type</th>
  </tr>
  <tr>
    <td><code>requestFrom</code></td>
    <td>The client socket, primarily used for logging and debugging.</td>
    <td>string</td>
  </tr>
  <tr>
    <td><code>data</code></td>
    <td>The request data.</td>
    <td>string - the imposter <code>mode</code> defines how the string
    is encoded.</td>
  </tr>
</table>

<h2>TCP Responses</h2>

<table>
  <tr>
    <th>Field</th>
    <th>Type</th>
    <th>Default</th>
  </tr>
  <tr>
    <td><code>data</code></td>
    <td>string</td>
    <td>an empty string, which does not respond with data, but does send
    the <code>FIN</code> bit.</td>
  </tr>
</table>

<h2 id='endOfRequestResolver'>Determining the end of a request</h2>

<p>The tricky bit about using the raw TCP protocol is knowing when a request ends.  Application
protocols give some way of determining this, such as the <code>Content-Length</code> header in
HTTP or by embedding the message length in binary protocols.  By default, mountebank assumes
each packet represents a separate request, which typically limits the size of each request
to somewhere between 1500 and 64k bytes (you'll get a larger payload using the loopback interface
on localhost, but lower level protocols like Ethernet will force a smaller payload over the network).
This strategy works for many scenarios as simple serialized requests tend to fall below this size,
but breaks down with large requests.</p>

<p>mountebank allows you the flexibility to determine when a request ends using the
<code>endOfRequestResolver</code> at the imposter level.  The value is a JavaScript function
that takes a parameter that represents all request data captured from all packets so far.  If the
imposter is in <code>text</code> mode, the parameter will be a string; in binary it will be a
<a href='http://nodejs.org/api/buffer.html'>node.js Buffer object</a>.
mountebank's <code>logger</code> object is also passed as an optional second parameter to
assist in troubleshooting.  Like all JavaScript injection, it requires the
<a href='/docs/commandLine'>--allowInjection command line flag</a> to execute.</p>

<p>Of course, the best option is to have native support for the protocol you're trying to use.
Let <a href='/support'>mountebank know</a> what you're trying to do, and he will try and help
you set up your <code>endOfRequestResolver</code> and consider adding your protocol to the
built-in protocols.</p>

<p>Let's look at both a binary and a text example:</p>

<h3>Supporting large binary requests</h3>

<p>The application protocols used for RPC are generally message based and requires some metadata
to define the boundaries of the message.  For this example, we'll emulate a
<a href='http://www.mulesoft.org/documentation/display/current/TCP+Transport+Reference#TCPTransportReference-ProtocolTables'>
Mule TCP connector</a>, which adds a four byte length prefix to each message in case it
spans multiple packets.  Since the message content itself isn't particularly important for this
example, we'll simply add enough text to guarantee it will split into multiple packets.  Here's
the <code>endOfRequestResolver</code> we'll use and the API call to create the imposter:</p>

<testScenario name='tcp-binary'>
<pre><code>function (requestData, logger) {
    var messageLength = requestData.readInt32BE(0);
    logger.info('Message length: ' + messageLength + ', so far: ' + requestData.length);
    return requestData.length >= messageLength;
}</code></pre>

    <step type='http'>
<pre><code>POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 5555,
  "protocol": "tcp",
  "mode": "binary",
  "stubs": [
    {
      "responses": [{ "is": { "data": "SGVsbG8sIHdvcmxkIQ==" } }]
    }
  ],
  "endOfRequestResolver": {
    "inject": "function (requestData, logger) { var messageLength = requestData.readInt32BE(0); logger.info('Message length: ' + messageLength + ', so far: ' + requestData.length); return requestData.length === messageLength; }"
  }
}</code></pre>
    </step>

<p>We'll send a large request with the total message size written as a big-endian integer in the first four bytes:</p>

)    <step type='exec'>
<pre><code>echo "" \
  | base64 --decode | nc localhost 5555</code></pre>
    </step>

<p>Let's <code>GET</code> our imposter to verify only one request was captured (part of the response is elided for brevity).</p>

    <step type='http'>
<pre><code>GET /imposters/5555 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json</code></pre>

        <assertResponse partial='true'>
<pre><code>{
  "protocol": "tcp",
  "port": 5555,
  "numberOfRequests": 1,
  "recordRequests": false,
  "mode": "binary",
  "requests": [
    {
      "requestFrom": "<volatile>::ffff:127.0.0.1:60642</volatile>",
      "ip": "<volatile>::ffff:127.0.0.1</volatile>",
      "data": "",
      "timestamp": "<volatile>2014-09-07T22:39:54.022Z</volatile>"
    }
  ]
}</code></pre>
        </assertResponse>

<p>Here's what the response would have looked like had we not set the <code>endOfRequestResolver</code>.
Notice that one logical message got split into multiple requests:</p>

<pre><code>HTTP/1.1 200 OK
Vary: Accept
Content-Type: application/json; charset=utf-8
Content-Length: 184268
Date: Sun, 18 Jan 2015 14:59:36 GMT
Connection: keep-alive

{
  "protocol": "tcp",
  "port": 5555,
  "numberOfRequests": 5,
  "mode": "binary",
  "requests": [
    {
      "requestFrom": "::ffff:127.0.0.1:53172",
      "ip": "::ffff:127.0.0.1",
      "data": "",
      "timestamp": "2014-09-07T22:39:54.022Z"
    },
    {
      "requestFrom": "::ffff:127.0.0.1:53172",
      "ip": "::ffff:127.0.0.1",
      "data": "",
      "timestamp": "2014-09-07T22:39:54.022Z"
    },
    {
      "requestFrom": "::ffff:127.0.0.1:53172",
      "ip": "::ffff:127.0.0.1",
      "data": "IGF1dGhvcml0eSBvdmVyIHRoZSBzZXJ2YW50cywgcm9zZSB0byBzcGVhay4gSGUsIHRoZW4sIHBsYWlubHkgYW5kIGluIGFsbCBob25lc3R5IGFkZHJlc3NlZCB0aGVtIHRodXM6DQoNCiJIZWFyIG1lLCBtZW4gb2YgSXRoYWNhLCBJIGhvcGUgdGhhdCB5b3UgbWF5IG5ldmVyIGhhdmUgYSBraW5kIGFuZCB3ZWxsLWRpc3Bvc2VkIHJ1bGVyIGFueSBtb3JlLCBub3Igb25lIHdobyB3aWxsIGdvdmVybiB5b3UgZXF1aXRhYmx5OyBJIGhvcGUgdGhhdCBhbGwgeW91ciBjaGllZnMgaGVuY2Vmb3J3YXJkIG1heSBiZSBjcnVlbCBhbmQgdW5qdXN0LCBmb3IgdGhlcmUgaXMgbm90IG9uZSBvZiB5b3UgYnV0IGhhcyBmb3Jnb3R0ZW4gVWx5c3Nlcywgd2hvIHJ1bGVkIHlvdSBhcyB0aG91Z2ggaGUgd2VyZSB5b3VyIGZhdGhlci4gSSBhbSBub3QgaGFsZiBzbyBhbmdyeSB3aXRoIHRoZSBzdWl0b3JzLCBmb3IgaWYgdGhleSBjaG9vc2UgdG8gZG8gdmlvbGVuY2UgaW4gdGhlIG5hdWdodGluZXNzIG9mIHRoZWlyIGhlYXJ0cywgYW5kIHdhZ2VyIHRoZWlyIGhlYWRzIHRoYXQgVWx5c3NlcyB3aWxsIG5vdCByZXR1cm4sIHRoZXkgY2FuIHRha2UgdGhlIGhpZ2ggaGFuZCBhbmQgZWF0IHVwIGhpcyBlc3RhdGUsIGJ1dCBhcyBmb3IgeW91IG90aGVycyBJIGFtIHNob2NrZWQgYXQgdGhlIHdheSBpbiB3aGljaCB5b3UgYWxsIHNpdCBzdGlsbCB3aXRob3V0IGV2ZW4gdHJ5aW5nIHRvIHN0b3Agc3VjaCBzY2FuZGFsb3VzIGdvaW5ncyBvbi13aGljaCB5b3UgY291bGQgZG8gaWYgeW91IGNob3NlLCBmb3IgeW91IGFyZSBtYW55IGFuZCB0aGV5IGFyZSBmZXcuIg0KDQpMZWlvY3JpdHVzLCBzb24gb2YgRXZlbm9yLCBhbnN3ZXJlZCBoaW0gc2F5aW5nLCAiTWVudG9yLCB3aGF0IGZvbGx5IGlzIGFsbCB0aGlzLCB0aGF0IHlvdSBzaG91bGQgc2V0IHRoZSBwZW9wbGUgdG8gc3RheSB1cz8gSXQgaXMgYSBoYXJkIHRoaW5nIGZvciBvbmUgbWFuIHRvIGZpZ2h0IHdpdGggbWFueSBhYm91dCBoaXMgdmljdHVhbHMuIEV2ZW4gdGhvdWdoIFVseXNzZXMgaGltc2VsZiB3ZXJlIHRvIHNldCB1cG9uIHVzIHdoaWxlIHdlIGFyZSBmZWFzdGluZyBpbiBoaXMgaG91c2UsIGFuZCBkbyBoaXMgYmVzdCB0byBvdXN0IHVzLCBoaXMgd2lmZSwgd2hvIHdhbnRzIGhpbSBiYWNrIHNvIHZlcnkgYmFkbHksIHdvdWxkIGhhdmUgc21hbGwgY2F1c2UgZm9yIHJlam9pY2luZywgYW5kIGhpcyBibG9vZCB3b3VsZCBiZSB1cG9uIGhpcyBvd24gaGVhZCBpZiBoZSBmb3VnaHQgYWdhaW5zdCBzdWNoIGdyZWF0IG9kZHMuIFRoZXJlIGlzIG5vIHNlbnNlIGluIHdoYXQgeW91IGhhdmUgYmVlbiBzYXlpbmcuIE5vdywgdGhlcmVmb3JlLCBkbyB5b3UgcGVvcGxlIGdvIGFib3V0IHlvdXIgYnVzaW5lc3MsIGFuZCBsZXQgaGlzIGZhdGhlcidzIG9sZCBmcmllbmRzLCBNZW50b3IgYW5kIEhhbGl0aGVyc2VzLCBzcGVlZCB0aGlzIGJveSBvbiBoaXMgam91cm5leSwgaWYgaGUgZ29lcyBhdCBhbGwtIHdoaWNoIEkgZG8gbm90IHRoaW5rIGhlIHdpbGwsIGZvciBoZSBpcyBtb3JlIGxpa2VseSB0byBzdGF5IHdoZXJlIGhlIGlzIHRpbGwgc29tZSBvbmUgY29tZXMgYW5kIHRlbGxzIGhpbSBzb21ldGhpbmcuIg0KDQpPbiB0aGlzIGhlIGJyb2tlIHVwIHRoZSBhc3NlbWJseSwgYW5kIGV2ZXJ5IG1hbiB3ZW50IGJhY2sgdG8gaGlzIG93biBhYm9kZSwgd2hpbGUgdGhlIHN1aXRvcnMgcmV0dXJuZWQgdG8gdGhlIGhvdXNlIG9mIFVseXNzZXMuDQoNClRoZW4gVGVsZW1hY2h1cyB3ZW50IGFsbCBhbG9uZSBieSB0aGUgc2VhIHNpZGUsIHdhc2hlZCBoaXMgaGFuZHMgaW4gdGhlIGdyZXkgd2F2ZXMsIGFuZCBwcmF5ZWQgdG8gTWluZXJ2YS4NCg0KIkhlYXIgbWUsIiBoZSBjcmllZCwgInlvdSBnb2Qgd2hvIHZpc2l0ZWQgbWUgeWVzdGVyZGF5LCBhbmQgYmFkZSBtZSBzYWlsIHRoZSBzZWFzIGluIHNlYXJjaCBvZiBteSBmYXRoZXIgd2hvIGhhcyBzbyBsb25nIGJlZW4gbWlzc2luZy4gSSB3b3VsZCBvYmV5IHlvdSwgYnV0IHRoZSBBY2hhZWFucywgYW5kIG1vcmUgcGFydGljdWxhcmx5IHRoZSB3aWNrZWQgc3VpdG9ycywgYXJlIGhpbmRlcmluZyBtZSB0aGF0IEkgY2Fubm90IGRvIHNvLiINCg0KQXMgaGUgdGh1cyBwcmF5ZWQsIE1pbmVydmEgY2FtZSBjbG9zZSB1cCB0byBoaW0gaW4gdGhlIGxpa2VuZXNzIGFuZCB3aXRoIHRoZSB2b2ljZSBvZiBNZW50b3IuICJUZWxlbWFjaHVzLCIgc2FpZCBzaGUsICJpZiB5b3UgYXJlIG1hZGUgb2YgdGhlIHNhbWUgc3R1ZmYgYXMgeW91ciBmYXRoZXIgeW91IHdpbGwgYmUgbmVpdGhlciBmb29sIG5vciBjb3dhcmQgaGVuY2Vmb3J3YXJkLCBmb3IgVWx5c3NlcyBuZXZlciBicm9rZSBoaXMgd29yZCBub3IgbGVmdCBoaXMgd29yayBoYWxmIGRvbmUuIElmLCB0aGVuLCB5b3UgdGFrZSBhZnRlciBoaW0sIHlvdXIgdm95YWdlIHdpbGwgbm90IGJlIGZydWl0bGVzcywgYnV0IHVubGVzcyB5b3UgaGF2ZSB0aGUgYmxvb2Qgb2YgVWx5c3NlcyBhbmQgb2YgUGVuZWxvcGUgaW4geW91ciB2ZWlucyBJIHNlZSBubyBsaWtlbGlob29kIG9mIHlvdXIgc3VjY2VlZGluZy4gU29ucyBhcmUgc2VsZG9tIGFzIGdvb2QgbWVuIGFzIHRoZWlyIGZhdGhlcnM7IHRoZXkgYXJlIGdlbmVyYWxseSB3b3JzZSwgbm90IGJldHRlcjsgc3RpbGwsIGFzIHlvdSBhcmUgbm90IGdvaW5nIHRvIGJlIGVpdGhlciBmb29sIG9yIGNvd2FyZCBoZW5jZWZvcndhcmQsIGFuZCBhcmUgbm90IGVudGlyZWx5IHdpdGhvdXQgc29tZSBzaGFyZSBvZiB5b3VyIGZhdGhlcidzIHdpc2UgZGlzY2Vybm1lbnQsIEkgbG9vayB3aXRoIGhvcGUgdXBvbiB5b3VyIHVuZGVydGFraW5nLiBCdXQgbWluZCB5b3UgbmV2ZXIgbWFrZSBjb21tb24gY2F1c2Ugd2l0aCBhbnkgb2YgdGhvc2UgZm9vbGlzaCBzdWl0b3JzLCBmb3IgdGhleSBoYXZlIG5laXRoZXIgc2Vuc2Ugbm9yIHZpcnR1ZSwgYW5kIGdpdmUgbm8gdGhvdWdodCB0byBkZWF0aCBhbmQgdG8gdGhlIGRvb20gdGhhdCB3aWxsIHNob3J0bHkgZmFsbCBvbiBvbmUgYW5kIGFsbCBvZiB0aGVtLCBzbyB0aGF0IHRoZXkgc2hhbGwgcGVyaXNoIG9uIHRoZSBzYW1lIGRheS4gQXMgZm9yIHlvdXIgdm95YWdlLCBpdCBzaGFsbCBub3QgYmUgbG9uZyBkZWxheWVkOyB5b3VyIGZhdGhlciB3YXMgc3VjaCBhbiBvbGQgZnJpZW5kIG9mIG1pbmUgdGhhdCBJIHdpbGwgZmluZCB5b3UgYSBzaGlwLCBhbmQgd2lsbCBjb21lIHdpdGggeW91IG15c2VsZi4gTm93LCBob3dldmVyLCByZXR1cm4gaG9tZSwgYW5kIGdvIGFib3V0IGFtb25nIHRoZSBzdWl0b3JzOyBiZWdpbiBnZXR0aW5nIHByb3Zpc2lvbnMgcmVhZHkgZm9yIHlvdXIgdm95YWdlOyBzZWUgZXZlcnl0aGluZyB3ZWxsIHN0b3dlZCwgdGhlIHdpbmUgaW4gamFycywgYW5kIHRoZSBiYXJsZXkgbWVhbCwgd2hpY2ggaXMgdGhlIHN0YWZmIG9mIGxpZmUsIGluIGxlYXRoZXJuIGJhZ3MsIHdoaWxlIEkgZ28gcm91bmQgdGhlIHRvd24gYW5kIGJlYXQgdXAgdm9sdW50ZWVycyBhdCBvbmNlLiBUaGVyZSBhcmUgbWFueSBzaGlwcyBpbiBJdGhhY2EgYm90aCBvbGQgYW5kIG5ldzsgSSB3aWxsIHJ1biBteSBleWUgb3ZlciB0aGVtIGZvciB5b3UgYW5kIHdpbGwgY2hvb3NlIHRoZSBiZXN0OyB3ZSB3aWxsIGdldCBoZXIgcmVhZHkgYW5kIHdpbGwgcHV0IG91dCB0byBzZWEgd2l0aG91dCBkZWxheS4iDQoNClRodXMgc3Bva2UgTWluZXJ2YSBkYXVnaHRlciBvZiBKb3ZlLCBhbmQgVGVsZW1hY2h1cyBsb3N0IG5vIHRpbWUgaW4gZG9pbmcgYXMgdGhlIGdvZGRlc3MgdG9sZCBoaW0uIEhlIHdlbnQgbW9vZGlseSBhbmQgZm91bmQgdGhlIHN1aXRvcnMgZmxheWluZyBnb2F0cyBhbmQgc2luZ2VpbmcgcGlncyBpbiB0aGUgb3V0ZXIgY291cnQuIEFudGlub3VzIGNhbWUgdXAgdG8gaGltIGF0IG9uY2UgYW5kIGxhdWdoZWQgYXMgaGUgdG9vayBoaXMgaGFuZCBpbiBoaXMgb3duLCBzYXlpbmcsICJUZWxlbWFjaHVzLCBteSBmaW5lIGZpcmUtZWF0ZXIsIGJlYXIgbm8gbW9yZSBpbGwgYmxvb2QgbmVpdGhlciBpbiB3b3JkIG5vciBkZWVkLCBidXQgZWF0IGFuZCBkcmluayB3aXRoIHVzIGFzIHlvdSB1c2VkIHRvIGRvLiBUaGUgQWNoYWVhbnMgd2lsbCBmaW5kIHlvdSBpbiBldmVyeXRoaW5nLSBhIHNoaXAgYW5kIGEgcGlja2VkIGNyZXcgdG8gYm9vdC0gc28gdGhhdCB5b3UgY2FuIHNldCBzYWlsIGZvciBQeWxvcyBhdCBvbmNlIGFuZCBnZXQgbmV3cyBvZiB5b3VyIG5vYmxlIGZhdGhlci4iDQoNCiJBbnRpbm91cywiIGFuc3dlcmVkIFRlbGVtYWNodXMsICJJIGNhbm5vdCBlYXQgaW4gcGVhY2UsIG5vciB0YWtlIHBsZWFzdXJlIG9mIGFueSBraW5kIHdpdGggc3VjaCBtZW4gYXMgeW91IGFyZS4gV2FzIGl0IG5vdCBlbm91Z2ggdGhhdCB5b3Ugc2hvdWxkIHdhc3RlIHNvIG11Y2ggZ29vZCBwcm9wZXJ0eSBvZiBtaW5lIHdoaWxlIEkgd2FzIHlldCBhIGJveT8gTm93IHRoYXQgSSBhbSBvbGRlciBhbmQga25vdyBtb3JlIGFib3V0IGl0LCBJIGFtIGFsc28gc3Ryb25nZXIsIGFuZCB3aGV0aGVyIGhlcmUgYW1vbmcgdGhpcyBwZW9wbGUsIG9yIGJ5IGdvaW5nIHRvIFB5bG9zLCBJIHdpbGwgZG8geW91IGFsbCB0aGUgaGFybSBJIGNhbi4gSSBzaGFsbCBnbywgYW5kIG15IGdvaW5nIHdpbGwgbm90IGJlIGluIHZhaW4gdGhvdWdoLCB0aGFua3MgdG8geW91IHN1aXRvcnMsIEkgaGF2ZSBuZWl0aGVyIHNoaXAgbm9yIGNyZXcgb2YgbXkgb3duLCBhbmQgbXVzdCBiZSBwYXNzZW5nZXIgbm90IGNhcHRhaW4uIg0KDQpBcyBoZSBzcG9rZSBoZSBzbmF0Y2hlZCBoaXMgaGFuZCBmcm9tIHRoYXQgb2YgQW50aW5vdXMuIE1lYW53aGlsZSB0aGUgb3RoZXJzIHdlbnQgb24gZ2V0dGluZyBkaW5uZXIgcmVhZHkgYWJvdXQgdGhlIGJ1aWxkaW5ncywgamVlcmluZyBhdCBoaW0gdGF1bnRpbmdseSBhcyB0aGV5IGRpZCBzby4NCg0KIlRlbGVtYWNodXMsIiBzYWlkIG9uZSB5b3VuZ3N0ZXIsICJtZWFucyB0byBiZSB0aGUgZGVhdGggb2YgdXM7IEkgc3VwcG9zZSBoZSB0aGlua3MgaGUgY2FuIGJyaW5nIGZyaWVuZHMgdG8gaGVscCBoaW0gZnJvbSBQeWxvcywgb3IgYWdhaW4gZnJvbSBTcGFydGEsIHdoZXJlIGhlIHNlZW1zIGJlbnQgb24gZ29pbmcuIE9yIHdpbGwgaGUgZ28gdG8gRXBoeXJhIGFzIHdlbGwsIGZvciBwb2lzb24gdG8gcHV0IGluIG91ciB3aW5lIGFuZCBraWxsIHVzPyINCg0KQW5vdGhlciBzYWlkLCAiUGVyaGFwcyBpZiBUZWxlbWFjaHVzIGdvZXMgb24gYm9hcmQgc2hpcCwgaGUgd2lsbCBiZSBsaWtlIGhpcyBmYXRoZXIgYW5kIHBlcmlzaCBmYXIgZnJvbSBoaXMgZnJpZW5kcy4gSW4gdGhpcyBjYXNlIHdlIHNob3VsZCBoYXZlIHBsZW50eSB0byBkbywgZm9yIHdlIGNvdWxkIHRoZW4gZGl2aWRlIHVwIGhpcyBwcm9wZXJ0eSBhbW9uZ3N0IHVzOiBhcyBmb3IgdGhlIGhvdXNlIHdlIGNhbiBsZXQgaGlzIG1vdGhlciBhbmQgdGhlIG1hbiB3aG8gbWFycmllcyBoZXIgaGF2ZSB0aGF0LiINCg0KVGhpcyB3YXMgaG93IHRoZXkgdGFsa2VkLiBCdXQgVGVsZW1hY2h1cyB3ZW50IGRvd24gaW50byB0aGUgbG9mdHkgYW5kIHNwYWNpb3VzIHN0b3JlLXJvb20gd2hlcmUgaGlzIGZhdGhlcidzIHRyZWFzdXJlIG9mIGdvbGQgYW5kIGJyb256ZSBsYXkgaGVhcGVkIHVwIHVwb24gdGhlIGZsb29yLCBhbmQgd2hlcmUgdGhlIGxpbmVuIGFuZCBzcGFyZSBjbG90aGVzIHdlcmUga2VwdCBpbiBvcGVuIGNoZXN0cy4gSGVyZSwgdG9vLCB0aGVyZSB3YXMgYSBzdG9yZSBvZiBmcmFncmFudCBvbGl2ZSBvaWwsIHdoaWxlIGNhc2tzIG9mIG9sZCwgd2VsbC1yaXBlbmVkIHdpbmUsIHVuYmxlbmRlZCBhbmQgZml0IGZvciBhIGdvZCB0byBkcmluaywgd2VyZSByYW5nZWQgYWdhaW5zdCB0aGUgd2FsbCBpbiBjYXNlIFVseXNzZXMgc2hvdWxkIGNvbWUgaG9tZSBhZ2FpbiBhZnRlciBhbGwuIFRoZSByb29tIHdhcyBjbG9zZWQgd2l0aCB3ZWxsLW1hZGUgZG9vcnMgb3BlbmluZyBpbiB0aGUgbWlkZGxlOyBtb3Jlb3ZlciB0aGUgZmFpdGhmdWwgb2xkIGhvdXNlLWtlZXBlciBFdXJ5Y2xlYSwgZGF1Z2h0ZXIgb2YgT3BzIHRoZSBzb24gb2YgUGlzZW5vciwgd2FzIGluIGNoYXJnZSBvZiBldmVyeXRoaW5nIGJvdGggbmlnaHQgYW5kIGRheS4gVGVsZW1hY2h1cyBjYWxsZWQgaGVyIHRvIHRoZSBzdG9yZS1yb29tIGFuZCBzYWlkOg0KDQoiTnVyc2UsIGRyYXcgbWUgb2ZmIHNvbWUgb2YgdGhlIGJlc3Qgd2luZSB5b3UgaGF2ZSwgYWZ0ZXIgd2hhdCB5b3UgYXJlIGtlZXBpbmcgZm9yIG15IGZhdGhlcidzIG93biBkcmlua2luZywgaW4gY2FzZSwgcG9vciBtYW4sIGhlIHNob3VsZCBlc2NhcGUgZGVhdGgsIGFuZCBmaW5kIGhpcyB3YXkgaG9tZSBhZ2FpbiBhZnRlciBhbGwuIExldCBtZSBoYXZlIHR3ZWx2ZSBqYXJzLCBhbmQgc2VlIHRoYXQgdGhleSBhbGwgaGF2ZSBsaWRzOyBhbHNvIGZpbGwgbWUgc29tZSB3ZWxsLXNld24gbGVhdGhlcm4gYmFncyB3aXRoIGJhcmxleSBtZWFsLSBhYm91dCB0d2VudHkgbWVhc3VyZXMgaW4gYWxsLiBHZXQgdGhlc2UgdGhpbmdzIHB1dCB0b2dldGhlciBhdCBvbmNlLCBhbmQgc2F5IG5vdGhpbmcgYWJvdXQgaXQuIEkgd2lsbCB0YWtlIGV2ZXJ5dGhpbmcgYXdheSB0aGlzIGV2ZW5pbmcgYXMgc29vbiBhcyBteSBtb3RoZXIgaGFzIGdvbmUgdXBzdGFpcnMgZm9yIHRoZSBuaWdodC4gSSBhbSBnb2luZyB0byBTcGFydGEgYW5kIHRvIFB5bG9zIHRvIHNlZSBpZiBJIGNhbiBoZWFyIGFueXRoaW5nIGFib3V0IHRoZSByZXR1cm4gb2YgbXkgZGVhciBmYXRoZXIuDQoNCldoZW4gRXVyeWNsZWEgaGVhcmQgdGhpcyBzaGUgYmVnYW4gdG8gY3J5LCBhbmQgc3Bva2UgZm9uZGx5IHRvIGhpbSwgc2F5aW5nLCAiTXkgZGVhciBjaGlsZCwgd2hhdCBldmVyIGNhbiBoYXZlIHB1dCBzdWNoIG5vdGlvbiBhcyB0aGF0IGludG8geW91ciBoZWFkPyBXaGVyZSBpbiB0aGUgd29ybGQgZG8geW91IHdhbnQgdG8gZ28gdG8tIHlvdSwgd2hvIGFyZSB0aGUgb25lIGhvcGUgb2YgdGhlIGhvdXNlPyBZb3VyIHBvb3IgZmF0aGVyIGlzIGRlYWQgYW5kIGdvbmUgaW4gc29tZSBmb3JlaWduIGNvdW50cnkgbm9ib2R5IGtub3dzIHdoZXJlLCBhbmQgYXMgc29vbiBhcyB5b3VyIGJhY2sgaXMgdHVybmVkIHRoZXNlIHdpY2tlZCBvbmVzIGhlcmUgd2lsbCBiZSBzY2hlbWluZyB0byBnZXQgeW91IHB1dCBvdXQgb2YgdGhlIHdheSwgYW5kIHdpbGwgc2hhcmUgYWxsIHlvdXIgcG9zc2Vzc2lvbnMgYW1vbmcgdGhlbXNlbHZlczsgc3RheSB3aGVyZSB5b3UgYXJlIGFtb25nIHlvdXIgb3duIHBlb3BsZSwgYW5kIGRvIG5vdCBnbyB3YW5kZXJpbmcgYW5kIHdvcnJ5aW5nIHlvdXIgbGlmZSBvdXQgb24gdGhlIGJhcnJlbiBvY2Vhbi4iDQoNCiJGZWFyIG5vdCwgbnVyc2UsIiBhbnN3ZXJlZCBUZWxlbWFjaHVzLCAibXkgc2NoZW1lIGlzIG5vdCB3aXRob3V0IGhlYXZlbidzIHNhbmN0aW9uOyBidXQgc3dlYXIgdGhhdCB5b3Ugd2lsbCBzYXkgbm90aGluZyBhYm91dCBhbGwgdGhpcyB0byBteSBtb3RoZXIsIHRpbGwgSSBoYXZlIGJlZW4gYXdheSBzb21lIHRlbiBvciB0d2VsdmUgZGF5cywgdW5sZXNzIHNoZSBoZWFycyBvZiBteSBoYXZpbmcgZ29uZSwgYW5kIGFza3MgeW91OyBmb3IgSSBkbyBub3Qgd2FudCBoZXIgdG8gc3BvaWwgaGVyIGJlYXV0eSBieSBjcnlpbmcuIg0KDQpUaGUgb2xkIHdvbWFuIHN3b3JlIG1vc3Qgc29sZW1ubHkgdGhhdCBzaGUgd291bGQgbm90LCBhbmQgd2hlbiBzaGUgaGFkIGNvbXBsZXRlZCBoZXIgb2F0aCwgc2hlIGJlZ2FuIGRyYXdpbmcgb2ZmIHRoZSB3aW5lIGludG8gamFycywgYW5kIGdldHRpbmcgdGhlIGJhcmxleSBtZWFsIGludG8gdGhlIGJhZ3MsIHdoaWxlIFRlbGVtYWNodXMgd2VudCBiYWNrIHRvIHRoZSBzdWl0b3JzLg0KDQpUaGVuIE1pbmVydmEgYmV0aG91Z2h0IGhlciBvZiBhbm90aGVyIG1hdHRlci4gU2hlIHRvb2sgaGlzIHNoYXBlLCBhbmQgd2VudCByb3VuZCB0aGUgdG93biB0byBlYWNoIG9uZSBvZiB0aGUgY3JldywgdGVsbGluZyB0aGVtIHRvIG1lZXQgYXQgdGhlIHNoaXAgYnkgc3VuZG93bi4gU2hlIHdlbnQgYWxzbyB0byBOb2Vtb24gc29uIG9mIFBocm9uaXVzLCBhbmQgYXNrZWQgaGltIHRvIGxldCBoZXIgaGF2ZSBhIHNoaXAtIHdoaWNoIGhlIHdhcyB2ZXJ5IHJlYWR5IHRvIGRvLiBXaGVuIHRoZSBzdW4gaGFkIHNldCBhbmQgZGFya25lc3Mgd2FzIG92ZXIgYWxsIHRoZSBsYW5kLCBzaGUgZ290IHRoZSBzaGlwIGludG8gdGhlIHdhdGVyLCBwdXQgYWxsIHRoZSB0YWNrbGUgb24gYm9hcmQgaGVyIHRoYXQgc2hpcHMgZ2VuZXJhbGx5IGNhcnJ5LCBhbmQgc3RhdGlvbmVkIGhlciBhdCB0aGUgZW5kIG9mIHRoZSBoYXJib3VyLiBQcmVzZW50bHkgdGhlIGNyZXcgY2FtZSB1cCwgYW5kIHRoZSBnb2RkZXNzIHNwb2tlIGVuY291cmFnaW5nbHkgdG8gZWFjaCBvZiB0aGVtLg0KDQpGdXJ0aGVybW9yZSBzaGUgd2VudCB0byB0aGUgaG91c2Ugb2YgVWx5c3NlcywgYW5kIHRocmV3IHRoZSBzdWl0b3JzIGludG8gYSBkZWVwIHNsdW1iZXIuIFNoZSBjYXVzZWQgdGhlaXIgZHJpbmsgdG8gZnVkZGxlIHRoZW0sIGFuZCBtYWRlIHRoZW0gZHJvcCB0aGVpciBjdXBzIGZyb20gdGhlaXIgaGFuZHMsIHNvIHRoYXQgaW5zdGVhZCBvZiBzaXR0aW5nIG92ZXIgdGhlaXIgd2luZSwgdGhleSB3ZW50IGJhY2sgaW50byB0aGUgdG93biB0byBzbGVlcCwgd2l0aCB0aGVpciBleWVzIGhlYXZ5IGFuZCBmdWxsIG9mIGRyb3dzaW5lc3MuIFRoZW4gc2hlIHRvb2sgdGhlIGZvcm0gYW5kIHZvaWNlIG9mIE1lbnRvciwgYW5kIGNhbGxlZCBUZWxlbWFjaHVzIHRvIGNvbWUgb3V0c2lkZS4NCg0KIlRlbGVtYWNodXMsIiBzYWlkIHNoZSwgInRoZSBtZW4gYXJlIG9uIGJvYXJkIGFuZCBhdCB0aGVpciBvYXJzLCB3YWl0aW5nIGZvciB5b3UgdG8gZ2l2ZSB5b3VyIG9yZGVycywgc28gbWFrZSBoYXN0ZSBhbmQgbGV0IHVzIGJlIG9mZi4iDQoNCk9uIHRoaXMgc2hlIGxlZCB0aGUgd2F5LCB3aGlsZSBUZWxlbWFjaHVzIGZvbGxvd2VkIGluIGhlciBzdGVwcy4gV2hlbiB0aGV5IGdvdCB0byB0aGUgc2hpcCB0aGV5IGZvdW5kIHRoZSBjcmV3IHdhaXRpbmcgYnkgdGhlIHdhdGVyIHNpZGUsIGFuZCBUZWxlbWFjaHVzIHNhaWQsICJOb3cgbXkgbWVuLCBoZWxwIG1lIHRvIGdldCB0aGUgc3RvcmVzIG9uIGJvYXJkOyB0aGV5IGFyZSBhbGwgcHV0IHRvZ2V0aGVyIGluIHRoZSBjbG9pc3RlciwgYW5kIG15IG1vdGhlciBkb2VzIG5vdCBrbm93IGFueXRoaW5nIGFib3V0IGl0LCBub3IgYW55IG9mIHRoZSBtYWlkIHNlcnZhbnRzIGV4Y2VwdCBvbmUuIg0KDQpXaXRoIHRoZXNlIHdvcmRzIGhlIGxlZCB0aGUgd2F5IGFuZCB0aGUgb3RoZXJzIGZvbGxvd2VkIGFmdGVyLiBXaGVuIHRoZXkgaGFkIGJyb3VnaHQgdGhlIHRoaW5ncyBhcyBoZSB0b2xkIHRoZW0sIFRlbGVtYWNodXMgd2VudCBvbiBib2FyZCwgTWluZXJ2YSBnb2luZyBiZWZvcmUgaGltIGFuZCB0YWtpbmcgaGVyIHNlYXQgaW4gdGhlIHN0ZXJuIG9mIHRoZSB2ZXNzZWwsIHdoaWxlIFRlbGVtYWNodXMgc2F0IGJlc2lkZSBoZXIuIFRoZW4gdGhlIG1lbiBsb29zZWQgdGhlIGhhd3NlcnMgYW5kIHRvb2sgdGhlaXIgcGxhY2VzIG9uIHRoZSBiZW5jaGVzLiBNaW5lcnZhIHNlbnQgdGhlbSBhIGZhaXIgd2luZCBmcm9tIHRoZSBXZXN0LCB0aGF0IHdoaXN0bGVkIG92ZXIgdGhlIGRlZXAgYmx1ZSB3YXZlcyB3aGVyZW9uIFRlbGVtYWNodXMgdG9sZCB0aGVtIHRvIGNhdGNoIGhvbGQgb2YgdGhlIHJvcGVzIGFuZCBob2lzdCBzYWlsLCBhbmQgdGhleSBkaWQgYXMgaGUgdG9sZCB0aGVtLiBUaGV5IHNldCB0aGUgbWFzdCBpbiBpdHMgc29ja2V0IGluIHRoZSBjcm9zcyBwbGFuaywgcmFpc2VkIGl0LCBhbmQgbWFkZSBpdCBmYXN0IHdpdGggdGhlIGZvcmVzdGF5czsgdGhlbiB0aGV5IGhvaXN0ZWQgdGhlaXIgd2hpdGUgc2FpbHMgYWxvZnQgd2l0aCByb3BlcyBvZiB0d2lzdGVkIG94IGhpZGUuIEFzIHRoZSBzYWlsIGJlbGxpZWQgb3V0IHdpdGggdGhlIHdpbmQsIHRoZSBzaGlwIGZsZXcgdGhyb3VnaCB0aGUgZGVlcCBibHVlIHdhdGVyLCBhbmQgdGhlIGZvYW0gaGlzc2VkIGFnYWluc3QgaGVyIGJvd3MgYXMgc2hlIHNwZWQgb253YXJkLiBUaGVuIHRoZXkgbWFkZSBhbGwgZmFzdCB0aHJvdWdob3V0IHRoZSBzaGlwLCBmaWxsZWQgdGhlIG1peGluZy1ib3dscyB0byB0aGUgYnJpbSwgYW5kIG1hZGUgZHJpbmsgb2ZmZXJpbmdzIHRvIHRoZSBpbW1vcnRhbCBnb2RzIHRoYXQgYXJlIGZyb20gZXZlcmxhc3RpbmcsIGJ1dCBtb3JlIHBhcnRpY3VsYXJseSB0byB0aGUgZ3JleS1leWVkIGRhdWdodGVyIG9mIEpvdmUuDQoNClRodXMsIHRoZW4sIHRoZSBzaGlwIHNwZWQgb24gaGVyIHdheSB0aHJvdWdoIHRoZSB3YXRjaGVzIG9mIHRoZSBuaWdodCBmcm9tIGRhcmsgdGlsbCBkYXduLg0KDQpCb29rIElJSQ0KDQpCdXQgYXMgdGhlIHN1biB3YXMgcmlzaW5nIGZyb20gdGhlIGZhaXIgc2VhIGludG8gdGhlIGZpcm1hbWVudCBvZiBoZWF2ZW4gdG8gc2hlZCBsaWdodCBvbiBtb3J0YWxzIGFuZCBpbW1vcnRhbHMsIHRoZXkgcmVhY2hlZCBQeWxvcyB0aGUgY2l0eSBvZiBOZWxldXMuIE5vdyB0aGUgcGVvcGxlIG9mIFB5bG9zIHdlcmUgZ2F0aGVyZWQgb24gdGhlIHNlYSBzaG9yZSB0byBvZmZlciBzYWNyaWZpY2Ugb2YgYmxhY2sgYnVsbHMgdG8gTmVwdHVuZSBsb3JkIG9mIHRoZSBFYXJ0aHF1YWtlLiBUaGVyZSB3ZXJlIG5pbmUgZ3VpbGRzIHdpdGggZml2ZSBodW5kcmVkIG1lbiBpbiBlYWNoLCBhbmQgdGhlcmUgd2VyZSBuaW5lIGJ1bGxzIHRvIGVhY2ggZ3VpbGQuIEFzIHRoZXkgd2VyZSBlYXRpbmcgdGhlIGlud2FyZCBtZWF0cyBhbmQgYnVybmluZyB0aGUgdGhpZ2ggYm9uZXMgW29uIHRoZSBlbWJlcnNdIGluIHRoZSBuYW1lIG9mIE5lcHR1bmUsIFRlbGVtYWNodXMgYW5kIGhpcyBjcmV3IGFycml2ZWQsIGZ1cmxlZCB0aGVpciBzYWlscywgYnJvdWdodCB0aGVpciBzaGlwIHRvIGFuY2hvciwgYW5kIHdlbnQgYXNob3JlLg0KDQpNaW5lcnZhIGxlZCB0aGUgd2F5IGFuZCBUZWxlbWFjaHVzIGZvbGxvd2VkIGhlci4gUHJlc2VudGx5IHNoZSBzYWlkLCAiVGVsZW1hY2h1cywgeW91IG11c3Qgbm90IGJlIGluIHRoZSBsZWFzdCBzaHkgb3IgbmVydm91czsgeW91IGhhdmUgdGFrZW4gdGhpcyB2b3lhZ2UgdG8gdHJ5IGFuZCBmaW5kIG91dCB3aGVyZSB5b3VyIGZhdGhlciBpcyBidXJpZWQgYW5kIGhvdyBoZSBjYW1lIGJ5IGhpcyBlbmQ7IHNvIGdvIHN0cmFpZ2h0IHVwIHRvIE5lc3RvciB0aGF0IHdlIG1heSBzZWUgd2hhdCBoZSBoYXMgZ290IHRvIHRlbGwgdXMuIEJlZyBvZiBoaW0gdG8gc3BlYWsgdGhlIHRydXRoLCBhbmQgaGUgd2lsbCB0ZWxsIG5vIGxpZXMsIGZvciBoZSBpcyBhbiBleGNlbGxlbnQgcGVyc29uLiINCg0KIkJ1dCBob3csIE1lbnRvciwiIHJlcGxpZWQgVGVsZW1hY2h1cywgImRhcmUgSSBnbyB1cCB0byBOZXN0b3IsIGFuZCBob3cgYW0gSSB0byBhZGRyZXNzIGhpbT8gSSBoYXZlIG5ldmVyIHlldCBiZWVuIHVzZWQgdG8gaG9sZGluZyBsb25nIGNvbnZlcnNhdGlvbnMgd2l0aCBwZW9wbGUsIGFuZCBhbSBhc2hhbWVkIHRvIGJlZ2luIHF1ZXN0aW9uaW5nIG9uZSB3aG8gaXMgc28gbXVjaCBvbGRlciB0aGFuIG15c2VsZi4iDQoNCiJTb21lIHRoaW5ncywgVGVsZW1hY2h1cywiIGFuc3dlcmVkIE1pbmVydmEsICJ3aWxsIGJlIHN1Z2dlc3RlZCB0byB5b3UgYnkgeW91ciBvd24gaW5zdGluY3QsIGFuZCBoZWF2ZW4gd2lsbCBwcm9tcHQgeW91IGZ1cnRoZXI7IGZvciBJIGFtIGFzc3VyZWQgdGhhdCB0aGUgZ29kcyBoYXZlIGJlZW4gd2l0aCB5b3UgZnJvbSB0aGUgdGltZSBvZiB5b3VyIGJpcnRoIHVudGlsIG5vdy4iDQoNClNoZSB0aGVuIHdlbnQgcXVpY2tseSBvbiwgYW5kIFRlbGVtYWNodXMgZm9sbG93ZWQgaW4gaGVyIHN0ZXBzIHRpbGwgdGhleSByZWFjaGVkIHRoZSBwbGFjZSB3aGVyZSB0aGUgZ3VpbGRzIG9mIHRoZSBQeWxpYW4gcGVvcGxlIHdlcmUgYXNzZW1ibGVkLiBUaGVyZSB0aGV5IGZvdW5kIE5lc3RvciBzaXR0aW5nIHdpdGggaGlzIHNvbnMsIHdoaWxlIGhpcyBjb21wYW55IHJvdW5kIGhpbSB3ZXJlIGJ1c3kgZ2V0dGluZyBkaW5uZXIgcmVhZHksIGFuZCBwdXR0aW5nIHBpZWNlcyBvZiBtZWF0IG9uIHRvIHRoZSBzcGl0cyB3aGlsZSBvdGhlciBwaWVjZXMgd2VyZSBjb29raW5nLiBXaGVuIHRoZXkgc2F3IHRoZSBzdHJhbmdlcnMgdGhleSBjcm93ZGVkIHJvdW5kIHRoZW0sIHRvb2sgdGhlbSBieSB0aGUgaGFuZCBhbmQgYmFkZSB0aGVtIHRha2UgdGhlaXIgcGxhY2VzLiBOZXN0b3IncyBzb24gUGlzaXN0cmF0dXMgYXQgb25jZSBvZmZlcmVkIGhpcyBoYW5kIHRvIGVhY2ggb2YgdGhlbSwgYW5kIHNlYXRlZCB0aGVtIG9uIHNvbWUgc29mdCBzaGVlcHNraW5zIHRoYXQgd2VyZSBseWluZyBvbiB0aGUgc2FuZHMgbmVhciBoaXMgZmF0aGVyIGFuZCBoaXMgYnJvdGhlciBUaHJhc3ltZWRlcy4gVGhlbiBoZSBnYXZlIHRoZW0gdGhlaXIgcG9ydGlvbnMgb2YgdGhlIGlud2FyZCBtZWF0cyBhbmQgcG91cmVkIHdpbmUgZm9yIHRoZW0gaW50byBhIGdvbGRlbiBjdXAsIGhhbmRpbmcgaXQgdG8gTWluZXJ2YSBmaXJzdCwgYW5kIHNhbHV0aW5nIGhlciBhdCB0aGUgc2FtZSB0aW1lLg0KDQoiT2ZmZXIgYSBwcmF5ZXIsIHNpciwiIHNhaWQgaGUsICJ0byBLaW5nIE5lcHR1bmUsIGZvciBpdCBpcyBoaXMgZmVhc3QgdGhhdCB5b3UgYXJlIGpvaW5pbmc7IHdoZW4geW91IGhhdmUgZHVseSBwcmF5ZWQgYW5kIG1hZGUgeW91ciBkcmluay1vZmZlcmluZywgcGFzcyB0aGUgY3VwIHRvIHlvdXIgZnJpZW5kIHRoYXQgaGUgbWF5IGRvIHNvIGFsc28uIEkgZG91YnQgbm90IHRoYXQgaGUgdG9vIGxpZnRzIGhpcyBoYW5kcyBpbiBwcmF5ZXIsIGZvciBtYW4gY2Fubm90IGxpdmUgd2l0aG91dCBHb2QgaW4gdGhlIHdvcmxkLiBTdGlsbCBoZSBpcyB5b3VuZ2VyIHRoYW4geW91IGFyZSwgYW5kIGlzIG11Y2ggb2YgYW4gYWdlIHdpdGggbXlzZWxmLCBzbyBJIGhlIGhhbmRlZCBJIHdpbGwgZ2l2ZSB5b3UgdGhlIHByZWNlZGVuY2UuIg0KDQpBcyBoZSBzcG9rZSBoZSBoYW5kZWQgaGVyIHRoZSBjdXAuIE1pbmVydmEgdGhvdWdodCBpdCB2ZXJ5IHJpZ2h0IGFuZCBwcm9wZXIgb2YgaGltIHRvIGhhdmUgZ2l2ZW4gaXQgdG8gaGVyc2VsZiBmaXJzdDsgc2hlIGFjY29yZGluZ2x5IGJlZ2FuIHByYXlpbmcgaGVhcnRpbHkgdG8gTmVwdHVuZS4gIk8gdGhvdSwiIHNoZSBjcmllZCwgInRoYXQgZW5jaXJjbGVzdCB0aGUgZWFydGgsIHZvdWNoc2FmZSB0byBncmFudCB0aGUgcHJheWVycyBvZiB0aHkgc2VydmFudHMgdGhhdCBjYWxsIHVwb24gdGhlZS4gTW9yZSBlc3BlY2lhbGx5IHdlIHByYXkgdGhlZSBzZW5kIGRvd24gdGh5IGdyYWNlIG9uIE5lc3RvciBhbmQgb24gaGlzIHNvbnM7IHRoZXJlYWZ0ZXIgYWxzbyBtYWtlIHRoZSByZXN0IG9mIHRoZSBQeWxpYW4gcGVvcGxlIHNvbWUgaGFuZHNvbWUgcmV0dXJuIGZvciB0aGUgZ29vZGx5IGhlY2F0b21iIHRoZXkgYXJlIG9mZmVyaW5nIHlvdS4gTGFzdGx5LCBncmFudCBUZWxlbWFjaHVzIGFuZCBteXNlbGYgYSBoYXBweSBpc3N1ZSwgaW4gcmVzcGVjdCBvZiB0aGUgbWF0dGVyIHRoYXQgaGFzIGJyb3VnaHQgdXMgaW4gb3VyIHRvIFB5bG9zLiINCg0KV2hlbiBzaGUgaGFkIHRodXMgbWFkZSBhbiBlbmQgb2YgcHJheWluZywgc2hlIGhhbmRlZCB0aGUgY3VwIHRvIFRlbGVtYWNodXMgYW5kIGhlIHByYXllZCBsaWtld2lzZS4gQnkgYW5kIGJ5LCB3aGVuIHRoZSBvdXRlciBtZWF0cyB3ZXJlIHJvYXN0ZWQgYW5kIGhhZCBiZWVuIHRha2VuIG9mZiB0aGUgc3BpdHMsIHRoZSBjYXJ2ZXJzIGdhdmUgZXZlcnkgbWFuIGhpcyBwb3J0aW9uIGFuZCB0aGV5IGFsbCBtYWRlIGFuIGV4Y2VsbGVudCBkaW5uZXIuIEFzIHNvb24gYXMgdGhleSBoYWQgaGFkIGVub3VnaCB0byBlYXQgYW5kIGRyaW5rLCBOZXN0b3IsIGtuaWdodCBvZiBHZXJlbmUsIGJlZ2FuIHRvIHNwZWFrLg0KDQoiTm93LCIgc2FpZCBoZSwgInRoYXQgb3VyIGd1ZXN0cyBoYXZlIGRvbmUgdGhlaXIgZGlubmVyLCBpdCB3aWxsIGJlIGJlc3QgdG8gYXNrIHRoZW0gd2hvIHRoZXkgYXJlLiBXaG8sIHRoZW4sIHNpciBzdHJhbmdlcnMsIGFyZSB5b3UsIGFuZCBmcm9tIHdoYXQgcG9ydCBoYXZlIHlvdSBzYWlsZWQ/IEFyZSB5b3UgdHJhZGVycz8gb3IgZG8geW91IHNhaWwgdGhlIHNlYXMgYXMgcm92ZXJzIHdpdGggeW91ciBoYW5kIGFnYWluc3QgZXZlcnkgbWFuLCBhbmQgZXZlcnkgbWFuJ3MgaGFuZCBhZ2FpbnN0IHlvdT8iDQoNClRlbGVtYWNodXMgYW5zd2VyZWQgYm9sZGx5LCBmb3IgTWluZXJ2YSBoYWQgZ2l2ZW4gaGltIGNvdXJhZ2UgdG8gYXNrIGFib3V0IGhpcyBmYXRoZXIgYW5kIGdldCBoaW1zZWxmIGEgZ29vZCBuYW1lLg0KDQoiTmVzdG9yLCIgc2FpZCBoZSwgInNvbiBvZiBOZWxldXMsIGhvbm91ciB0byB0aGUgQWNoYWVhbiBuYW1lLCB5b3UgYXNrIHdoZW5jZSB3ZSBjb21lLCBhbmQgSSB3aWxsIHRlbGwgeW91LiBXZSBjb21lIGZyb20gSXRoYWNhIHVuZGVyIE5lcml0dW0sIGFuZCB0aGUgbWF0dGVyIGFib3V0IHdoaWNoIEkgd291bGQgc3BlYWsgaXMgb2YgcHJpdmF0ZSBub3QgcHVibGljIGltcG9ydC4gSSBzZWVrIG5ld3Mgb2YgbXkgdW5oYXBweSBmYXRoZXIgVWx5c3Nlcywgd2hvIGlzIHNhaWQgdG8gaGF2ZSBzYWNrZWQgdGhlIHRvd24gb2YgVHJveSBpbiBjb21wYW55IHdpdGggeW91cnNlbGYuIFdlIGtub3cgd2hhdCBmYXRlIGJlZmVsbCBlYWNoIG9uZSBvZiB0aGUgb3RoZXIgaGVyb2VzIHdobyBmb3VnaHQgYXQgVHJveSwgYnV0IGFzIHJlZ2FyZHMgVWx5c3NlcyBoZWF2ZW4gaGFzIGhpZGRlbiBmcm9tIHVzIHRoZSBrbm93bGVkZ2UgZXZlbiB0aGF0IGhlIGlzIGRlYWQgYXQgYWxsLCBmb3Igbm8gb25lIGNhbiBjZXJ0aWZ5IHVzIGluIHdoYXQgcGxhY2UgaGUgcGVyaXNoZWQsIG5vciBzYXkgd2hldGhlciBoZSBmZWxsIGluIGJhdHRsZSBvbiB0aGUgbWFpbmxhbmQsIG9yIHdhcyBsb3N0IGF0IHNlYSBhbWlkIHRoZSB3YXZlcyBvZiBBbXBoaXRyaXRlLiBUaGVyZWZvcmUgSSBhbSBzdXBwbGlhbnQgYXQgeW91ciBrbmVlcywgaWYgaGFwbHkgeW91IG1heSBiZSBwbGVhc2VkIHRvIHRlbGwgbWUgb2YgaGlzIG1lbGFuY2hvbHkgZW5kLCB3aGV0aGVyIHlvdSBzYXcgaXQgd2l0aCB5b3VyIG93biBleWVzLCBvciBoZWFyZCBpdCBmcm9tIHNvbWUgb3RoZXIgdHJhdmVsbGVyLCBmb3IgaGUgd2FzIGEgbWFuIGJvcm4gdG8gdHJvdWJsZS4gRG8gbm90IHNvZnRlbiB0aGluZ3Mgb3V0IG9mIGFueSBwaXR5IGZvciBtZSwgYnV0IHRlbGwgbWUgaW4gYWxsIHBsYWlubmVzcyBleGFjdGx5IHdoYXQgeW91IHNhdy4gSWYgbXkgYnJhdmUgZmF0aGVyIFVseXNzZXMgZXZlciBkaWQgeW91IGxveWFsIHNlcnZpY2UsIGVpdGhlciBieSB3b3JkIG9yIGRlZWQsIHdoZW4geW91IEFjaGFlYW5zIHdlcmUgaGFyYXNzZWQgYW1vbmcgdGhlIFRyb2phbnMsIGJlYXIgaXQgaW4gbWluZCBub3cgYXMgaW4gbXkgZmF2b3VyIGFuZCB0ZWxsIG1lIHRydWx5IGFsbC4iDQoNCiJNeSBmcmllbmQsIiBhbnN3ZXJlZCBOZXN0b3IsICJ5b3UgcmVjYWxsIGEgdGltZSBvZiBtdWNoIHNvcnJvdyB0byBteSBtaW5kLCBmb3IgdGhlIGJyYXZlIEFjaGFlYW5zIHN1ZmZlcmVkIG11Y2ggYm90aCBhdCBzZWEsIHdoaWxlIHByaXZhdGVlcmluZyB1bmRlciBBY2hpbGxlcywgYW5kIHdoZW4gZmlnaHRpbmcgYmVmb3JlIHRoZSBncmVhdCBjaXR5IG9mIGtpbmcgUHJpYW0uIE91ciBiZXN0IG1lbiBhbGwgb2YgdGhlbSBmZWxsIHRoZXJlLSBBamF4LCBBY2hpbGxlcywgUGF0cm9jbHVzIHBlZXIgb2YgZ29kcyBpbiBjb3Vuc2VsLCBhbmQgbXkgb3duIGRlYXIgc29uIEFudGlsb2NodXMsIGEgbWFuIHNpbmd1bGFybHkgZmxlZXQgb2YgZm9vdCBhbmQgaW4gZmlnaHQgdmFsaWFudC4gQnV0IHdlIHN1ZmZlcmVkIG11Y2ggbW9yZSB0aGFuIHRoaXM7IHdoYXQgbW9ydGFsIHRvbmd1ZSBpbmRlZWQgY291bGQgdGVsbCB0aGUgd2hvbGUgc3Rvcnk/IFRob3VnaCB5b3Ugd2VyZSB0byBzdGF5IGhlcmUgYW5kIHF1ZXN0aW9uIG1lIGZvciBmaXZlIHllYXJzLCBvciBldmVuIHNpeCwgSSBjb3VsZCBub3QgdGVsbCB5b3UgYWxsIHRoYXQgdGhlIEFjaGFlYW5zIHN1ZmZlcmVkLCBhbmQgeW91IHdvdWxkIHR1cm4gaG9tZXdhcmQgd2Vhcnkgb2YgbXkgdGFsZSBiZWZvcmUgaXQgZW5kZWQuIE5pbmUgbG9uZyB5ZWFycyBkaWQgd2UgdHJ5IGV2ZXJ5IGtpbmQgb2Ygc3RyYXRhZ2VtLCBidXQgdGhlIGhhbmQgb2YgaGVhdmVuIHdhcyBhZ2FpbnN0IHVzOyBkdXJpbmcgYWxsIHRoaXMgdGltZSB0aA==",
      "timestamp": "2014-09-07T22:39:54.022Z"
    },
    {
      "requestFrom": "::ffff:127.0.0.1:53172",
      "ip": "::ffff:127.0.0.1",
      "data": "ZXJlIHdhcyBubyBvbmUgd2hvIGNvdWxkIGNvbXBhcmUgd2l0aCB5b3VyIGZhdGhlciBpbiBzdWJ0bGV0eS0gaWYgaW5kZWVkIHlvdSBhcmUgaGlzIHNvbi0gSSBjYW4gaGFyZGx5IGJlbGlldmUgbXkgZXllcy0gYW5kIHlvdSB0YWxrIGp1c3QgbGlrZSBoaW0gdG9vLSBubyBvbmUgd291bGQgc2F5IHRoYXQgcGVvcGxlIG9mIHN1Y2ggZGlmZmVyZW50IGFnZXMgY291bGQgc3BlYWsgc28gbXVjaCBhbGlrZS4gSGUgYW5kIEkgbmV2ZXIgaGFkIGFueSBraW5kIG9mIGRpZmZlcmVuY2UgZnJvbSBmaXJzdCB0byBsYXN0IG5laXRoZXIgaW4gY2FtcCBub3IgY291bmNpbCwgYnV0IGluIHNpbmdsZW5lc3Mgb2YgaGVhcnQgYW5kIHB1cnBvc2Ugd2UgYWR2aXNlZCB0aGUgQXJnaXZlcyBob3cgYWxsIG1pZ2h0IGJlIG9yZGVyZWQgZm9yIHRoZSBiZXN0Lg0KDQoiV2hlbiBob3dldmVyLCB3ZSBoYWQgc2Fja2VkIHRoZSBjaXR5IG9mIFByaWFtLCBhbmQgd2VyZSBzZXR0aW5nIHNhaWwgaW4gb3VyIHNoaXBzIGFzIGhlYXZlbiBoYWQgZGlzcGVyc2VkIHVzLCB0aGVuIEpvdmUgc2F3IGZpdCB0byB2ZXggdGhlIEFyZ2l2ZXMgb24gdGhlaXIgaG9tZXdhcmQgdm95YWdlOyBmb3IgdGhleSBoYWQgTm90IGFsbCBiZWVuIGVpdGhlciB3aXNlIG9yIHVuZGVyc3RhbmRpbmcsIGFuZCBoZW5jZSBtYW55IGNhbWUgdG8gYSBiYWQgZW5kIHRocm91Z2ggdGhlIGRpc3BsZWFzdXJlIG9mIEpvdmUncyBkYXVnaHRlciBNaW5lcnZhLCB3aG8gYnJvdWdodCBhYm91dCBhIHF1YXJyZWwgYmV0d2VlbiB0aGUgdHdvIHNvbnMgb2YgQXRyZXVzLg0KDQoiVGhlIHNvbnMgb2YgQXRyZXVzIGNhbGxlZCBhIG1lZXRpbmcgd2hpY2ggd2FzIG5vdCBhcyBpdCBzaG91bGQgYmUsIGZvciBpdCB3YXMgc3Vuc2V0IGFuZCB0aGUgQWNoYWVhbnMgd2VyZSBoZWF2eSB3aXRoIHdpbmUuIFdoZW4gdGhleSBleHBsYWluZWQgd2h5IHRoZXkgaGFkIGNhbGxlZC0gdGhlIHBlb3BsZSB0b2dldGhlciwgaXQgc2VlbWVkIHRoYXQgTWVuZWxhdXMgd2FzIGZvciBzYWlsaW5nIGhvbWV3YXJkIGF0IG9uY2UsIGFuZCB0aGlzIGRpc3BsZWFzZWQgQWdhbWVtbm9uLCB3aG8gdGhvdWdodCB0aGF0IHdlIHNob3VsZCB3YWl0IHRpbGwgd2UgaGFkIG9mZmVyZWQgaGVjYXRvbWJzIHRvIGFwcGVhc2UgdGhlIGFuZ2VyIG9mIE1pbmVydmEuIEZvb2wgdGhhdCBoZSB3YXMsIGhlIG1pZ2h0IGhhdmUga25vd24gdGhhdCBoZSB3b3VsZCBub3QgcHJldmFpbCB3aXRoIGhlciwgZm9yIHdoZW4gdGhlIGdvZHMgaGF2ZSBtYWRlIHVwIHRoZWlyIG1pbmRzIHRoZXkgZG8gbm90IGNoYW5nZSB0aGVtIGxpZ2h0bHkuIFNvIHRoZSB0d28gc3Rvb2QgYmFuZHlpbmcgaGFyZCB3b3Jkcywgd2hlcmVvbiB0aGUgQWNoYWVhbnMgc3ByYW5nIHRvIHRoZWlyIGZlZXQgd2l0aCBhIGNyeSB0aGF0IHJlbnQgdGhlIGFpciwgYW5kIHdlcmUgb2YgdHdvIG1pbmRzIGFzIHRvIHdoYXQgdGhleSBzaG91bGQgZG8uDQoNCiJUaGF0IG5pZ2h0IHdlIHJlc3RlZCBhbmQgbnVyc2VkIG91ciBhbmdlciwgZm9yIEpvdmUgd2FzIGhhdGNoaW5nIG1pc2NoaWVmIGFnYWluc3QgdXMuIEJ1dCBpbiB0aGUgbW9ybmluZyBzb21lIG9mIHVzIGRyZXcgb3VyIHNoaXBzIGludG8gdGhlIHdhdGVyIGFuZCBwdXQgb3VyIGdvb2RzIHdpdGggb3VyIHdvbWVuIG9uIGJvYXJkLCB3aGlsZSB0aGUgcmVzdCwgYWJvdXQgaGFsZiBpbiBudW1iZXIsIHN0YXllZCBiZWhpbmQgd2l0aCBBZ2FtZW1ub24uIFdlLSB0aGUgb3RoZXIgaGFsZi0gZW1iYXJrZWQgYW5kIHNhaWxlZDsgYW5kIHRoZSBzaGlwcyB3ZW50IHdlbGwsIGZvciBoZWF2ZW4gaGFkIHNtb290aGVkIHRoZSBzZWEuIFdoZW4gd2UgcmVhY2hlZCBUZW5lZG9zIHdlIG9mZmVyZWQgc2FjcmlmaWNlcyB0byB0aGUgZ29kcywgZm9yIHdlIHdlcmUgbG9uZ2luZyB0byBnZXQgaG9tZTsgY3J1ZWwgSm92ZSwgaG93ZXZlciwgZGlkIG5vdCB5ZXQgbWVhbiB0aGF0IHdlIHNob3VsZCBkbyBzbywgYW5kIHJhaXNlZCBhIHNlY29uZCBxdWFycmVsIGluIHRoZSBjb3Vyc2Ugb2Ygd2hpY2ggc28=",
      "timestamp": "2014-09-07T22:39:54.022Z"
    },
    {
      "requestFrom": "::ffff:127.0.0.1:53172",
      "ip": "::ffff:127.0.0.1",
      "data": "bWUgYW1vbmcgdXMgdHVybmVkIHRoZWlyIHNoaXBzIGJhY2sgYWdhaW4sIGFuZCBzYWlsZWQgYXdheSB1bmRlciBVbHlzc2VzIHRvIG1ha2UgdGhlaXIgcGVhY2Ugd2l0aCBBZ2FtZW1ub247IGJ1dCBJLCBhbmQgYWxsIHRoZSBzaGlwcyB0aGF0IHdlcmUgd2l0aCBtZSBwcmVzc2VkIGZvcndhcmQsIGZvciBJIHNhdyB0aGF0IG1pc2NoaWVmIHdhcyBicmV3aW5nLiBUaGUgc29uIG9mIFR5ZGV1cyB3ZW50IG9uIGFsc28gd2l0aCBtZSwgYW5kIGhpcyBjcmV3cyB3aXRoIGhpbS4gTGF0ZXIgb24gTWVuZWxhdXMgam9pbmVkIHVzIGF0IExlc2JvcywgYW5kIGZvdW5kIHVzIG1ha2luZyB1cCBvdXIgbWluZHMgYWJvdXQgb3VyIGNvdXJzZS0gZm9yIHdlIGRpZCBub3Qga25vdyB3aGV0aGVyIHRvIGdvIG91dHNpZGUgQ2hpb3MgYnkgdGhlIGlzbGFuZCBvZiBQc3lyYSwga2VlcGluZyB0aGlzIHRvIG91ciBsZWZ0LCBvciBpbnNpZGUgQ2hpb3MsIG92ZXIgYWdhaW5zdCB0aGUgc3Rvcm15IGhlYWRsYW5kIG9mIE1pbWFzLiBTbyB3ZSBhc2tlZCBoZWF2ZW4gZm9yIGEgc2lnbiwgYW5kIHdlcmUgc2hvd24gb25lIHRvIHRoZSBlZmZlY3QgdGhhdCB3ZSBzaG91bGQgYmUgc29vbmVzdCBvdXQgb2YgZGFuZ2VyIGlmIHdlIGhlYWRlZCBvdXIgc2hpcHMgYWNyb3NzIHRoZSBvcGVuIHNlYSB0byBFdWJvZWEuIFRoaXMgd2UgdGhlcmVmb3JlIGRpZCwgYW5kIGEgZmFpciB3aW5kIHNwcmFuZyB1cCB3aGljaCBnYXZlIHVzIGEgcXVpY2sgcGFzc2FnZSBkdXJpbmcgdGhlIG5pZ2h0IHRvIEdlcmFlc3R1cywgd2hlcmUgd2Ugb2ZmZXJlZCBtYW55IHNhY3JpZmljZXMgdG8gTmVwdHVuZSBmb3IgaGF2aW5nIGhlbHBlZCB1cyBzbyBmYXIgb24gb3VyIHdheS4gRm91ciBkYXlzIGxhdGVyIERpb21lZCBhbmQgaGlzIG1lbiBzdGF0aW9uZWQgdGhlaXIgc2hpcHMgaW4gQXJnb3MsIGJ1dCBJIGhlbGQgb24gZm9yIFB5bG9zLCBhbmQgdGhlIHdpbmQgbmV2ZXIgZmVsbCBsaWdodCBmcm9tIHRoZSBkYXkgd2hlbiBoZWF2ZW4gZmlyc3QgbWFkZSBpdCBmYWlyIGZvciBtZS4NCg0KIlRoZXJlZm9yZSwgbXkgZGVhciB5b3VuZyBmcmllbmQsIEkgcmV0dXJuZWQgd2l0aG91dCBoZWFyaW5nIGFueXRoaW5nIGFib3V0IHRoZSBvdGhlcnMuIEkga25vdyBuZWl0aGVyIHdobyBnb3QgaG9tZSBzYWZlbHkgbm9yIHdobyB3ZXJlIGxvc3QgYnV0LCBhcyBpbiBkdXR5IGJvdW5kLCBJIHdpbGwgZ2l2ZSB5b3Ugd2l0aG91dCByZXNlcnZlIHRoZSByZXBvcnRzIHRoYXQgaGF2ZSByZWFjaGVkIG1lIHNpbmNlIEkgaGF2ZSBiZWVuIGhlcmUgaW4gbXkgb3duIGhvdXNlLiBUaGV5IHNheSB0aGUgTXlybWlkb25zIHJldHVybmVkIGhvbWUgc2FmZWx5IHVuZGVyIEFjaGlsbGVzJyBzb24gTmVvcHRvbGVtdXM7IHNvIGFsc28gZGlkIHRoZSB2YWxpYW50IHNvbiBvZiBQb2lhcywgUGhpbG9jdGV0ZXMuIElkb21lbmV1cywgYWdhaW4sIGxvc3Qgbm8gbWVuIGF0IHNlYSwgYW5kIGFsbCBoaXMgZm9sbG93ZXJzIHdobyBlc2NhcGVkIGRlYXRoIGluIHRoZSBmaWVsZCBnb3Qgc2FmZSBob21lIHdpdGggaGltIHRvIENyZXRlLiBObyBtYXR0ZXIgaG93IGZhciBvdXQgb2YgdGhlIHdvcmxkIHlvdSBsaXZlLCB5b3Ugd2lsbCBoYXZlIGhlYXJkIG9mIEFnYW1lbW5vbiBhbmQgdGhlIGJhZCBlbmQgaGUgY2FtZSB0byBhdCB0aGUgaGFuZHMgb2YgQWVnaXN0aHVzLSBhbmQgYSBmZWFyZnVsIHJlY2tvbmluZyBkaWQgQWVnaXN0aHVzIHByZXNlbnRseSBwYXkuIFNlZSB3aGF0IGEgZ29vZCB0aGluZyBpdCBpcyBmb3IgYSBtYW4gdG8gbGVhdmUgYSBzb24gYmVoaW5kIGhpbSB0byBkbyBhcyBPcmVzdGVzIGRpZCwgd2hvIGtpbGxlZCBmYWxzZSBBZWdpc3RodXMgdGhlIG11cmRlcmVyIG9mIGhpcyBub2JsZSBmYXRoZXIuIFlvdSB0b28sIHRoZW4tIGZvciB5b3UgYXJlIGEgdGFsbCwgc21hcnQtbG9va2luZyBmZWxsb3ctIHNob3cgeW91ciBtZXR0bGUgYW5kIG1ha2UgeW91cnNlbGYgYSBuYW1lIGluIHN0b3J5LiINCg0KIk5lc3RvciBzb24gb2YgTmVsZXVzLCIgYW5zd2VyZWQgVGVsZW1hY2h1cywgImhvbm91ciB0byB0aGUgQWNoYWVhbiBuYW1lLCB0aGUgQWNoYWVhbnMgYXBwbGF1ZCBPcmVzdGVzIGFuZCBoaXMgbmFtZSB3aWxsIGxpdmUgdGhyb3VnaCBhbGwgdGltZSBmb3IgaGUgaGFzIGF2ZW5nZWQgaGlzIGZhdGhlciBub2JseS4gV291bGQgdGhhdCBoZWF2ZW4gbWlnaHQgZ3JhbnQgbWUgdG8gZG8gbGlrZSB2ZW5nZWFuY2Ugb24gdGhlIGluc29sZW5jZSBvZiB0aGUgd2lja2VkIHN1aXRvcnMsIHdobyBhcmUgaWxsIHRyZWF0aW5nIG1lIGFuZCBwbG90dGluZyBteSBydWluOyBidXQgdGhlIGdvZHMgaGF2ZSBubyBzdWNoIGhhcHBpbmVzcyBpbiBzdG9yZSBmb3IgbWUgYW5kIGZvciBteSBmYXRoZXIsIHNvIHdlIG11c3QgYmVhciBpdCBhcyBiZXN0IHdlIG1heS4iDQoNCiJNeSBmcmllbmQsIiBzYWlkIE5lc3RvciwgIm5vdyB0aGF0IHlvdSByZW1pbmQgbWUsIEkgcmVtZW1iZXIgdG8gaGF2ZSBoZWFyZCB0aGF0IHlvdXIgbW90aGVyIGhhcyBtYW55IHN1aXRvcnMsIHdobyBhcmUgaWxsIGRpc3Bvc2VkIHRvd2FyZHMgeW91IGFuZCBhcmUgbWFraW5nIGhhdm9jIG9mIHlvdXIgZXN0YXRlLiBEbyB5b3Ugc3VibWl0IHRvIHRoaXMgdGFtZWx5LCBvciBhcmUgcHVibGljIGZlZWxpbmcgYW5kIHRoZSB2b2ljZSBvZiBoZWF2ZW4gYWdhaW5zdCB5b3U/IFdobyBrbm93cyBidXQgd2hhdCBVbHlzc2VzIG1heSBjb21lIGJhY2sgYWZ0ZXIgYWxsLCBhbmQgcGF5IHRoZXNlIHNjb3VuZHJlbHMgaW4gZnVsbCwgZWl0aGVyIHNpbmdsZS1oYW5kZWQgb3Igd2l0aCBhIGZvcmNlIG9mIEFjaGFlYW5zIGJlaGluZCBoaW0/IElmIE1pbmVydmEgd2VyZSB0byB0YWtlIGFzIGdyZWF0IGEgbGlraW5nIHRvIHlvdSBhcyBzaGUgZGlkIHRvIFVseXNzZXMgd2hlbiB3ZSB3ZXJlIGZpZ2h0aW5nIGJlZm9yZSBUcm95IChmb3IgSSBuZXZlciB5ZXQgc2F3IHRoZSBnb2RzIHNvIG9wZW5seSBmb25kIG9mIGFueSBvbmUgYXMgTWluZXJ2YSB0aGVuIHdhcyBvZiB5b3VyIGZhdGhlciksIGlmIHNoZSB3b3VsZCB0YWtlIGFzIGdvb2QgY2FyZSBvZiB5b3UgYXMgc2hlIGRpZCBvZiBoaW0sIHRoZXNlIHdvb2VycyB3b3VsZCBzb29uIHNvbWUgb2YgdGhlbSBoaW0sIGZvcmdldCB0aGVpciB3b29pbmcuIg0KDQpUZWxlbWFjaHVzIGFuc3dlcmVkLCAiSSBjYW4gZXhwZWN0IG5vdGhpbmcgb2YgdGhlIGtpbmQ7IGl0IHdvdWxkIGJlIGZhciB0b28gbXVjaCB0byBob3BlIGZvci4gSSBkYXJlIG5vdCBsZXQgbXlzZWxmIHRoaW5rIG9mIGl0LiBFdmVuIHRob3VnaCB0aGUgZ29kcyB0aGVtc2VsdmVzIHdpbGxlZCBpdCBubyBzdWNoIGdvb2QgZm9ydHVuZSBjb3VsZCBiZWZhbGwgbWUuIg0KDQpPbiB0aGlzIE1pbmVydmEgc2FpZCwgIlRlbGVtYWNodXMsIHdoYXQgYXJlIHlvdSB0YWxraW5nIGFib3V0PyBIZWF2ZW4gaGFzIGEgbG9uZyBhcm0gaWYgaXQgaXMgbWluZGVkIHRvIHNhdmUgYSBtYW47IGFuZCBpZiBpdCB3ZXJlIG1lLCBJIHNob3VsZCBub3QgY2FyZSBob3cgbXVjaCBJIHN1ZmZlcmVkIGJlZm9yZSBnZXR0aW5nIGhvbWUsIHByb3ZpZGVkIEkgY291bGQgYmUgc2FmZSB3aGVuIEkgd2FzIG9uY2UgdGhlcmUuIEkgd291bGQgcmF0aGVyIHRoaXMsIHRoYW4gZ2V0IGhvbWUgcXVpY2tseSwgYW5kIHRoZW4gYmUga2lsbGVkIGluIG15IG93biBob3VzZSBhcyBBZ2FtZW1ub24gd2FzIGJ5IHRoZSB0cmVhY2hlcnkgb2YgQWVnaXN0aHVzIGFuZCBoaXMgd2lmZS4gU3RpbGwsIGRlYXRoIGlzIGNlcnRhaW4sIGFuZCB3aGVuIGEgbWFuJ3MgaG91ciBpcyBjb21lLCBub3QgZXZlbiB0aGUgZ29kcyBjYW4gc2F2ZSBoaW0sIG5vIG1hdHRlciBob3cgZm9uZCB0aGV5IGFyZSBvZiBoaW0uIg0KDQoiTWVudG9yLCIgYW5zd2VyZWQgVGVsZW1hY2h1cywgImRvIG5vdCBsZXQgdXMgdGFsayBhYm91dCBpdCBhbnkgbW9yZS4gVGhlcmUgaXMgbm8gY2hhbmNlIG9mIG15IGZhdGhlcidzIGV2ZXIgY29taW5nIGJhY2s7IHRoZSBnb2RzIGhhdmUgbG9uZyBzaW5jZSBjb3Vuc2VsbGVkIGhpcyBkZXN0cnVjdGlvbi4gVGhlcmUgaXMgc29tZXRoaW5nIGVsc2UsIGhvd2V2ZXIsIGFib3V0IHdoaWNoIEkgc2hvdWxkIGxpa2UgdG8gYXNrIE5lc3RvciwgZm9yIGhlIGtub3dzIG11Y2ggbW9yZSB0aGFuIGFueSBvbmUgZWxzZSBkb2VzLiBUaGV5IHNheSBoZSBoYXMgcmVpZ25lZCBmb3IgdGhyZWUgZ2VuZXJhdGlvbnMgc28gdGhhdCBpdCBpcyBsaWtlIHRhbGtpbmcgdG8gYW4gaW1tb3J0YWwuIFRlbGwgbWUsIHRoZXJlZm9yZSwgTmVzdG9yLCBhbmQgdGVsbCBtZSB0cnVlOyBob3cgZGlkIEFnYW1lbW5vbiBjb21lIHRvIGRpZSBpbiB0aGF0IHdheT8gV2hhdCB3YXMgTWVuZWxhdXMgZG9pbmc/IEFuZCBob3cgY2FtZSBmYWxzZSBBZWdpc3RodXMgdG8ga2lsbCBzbyBmYXIgYmV0dGVyIGEgbWFuIHRoYW4gaGltc2VsZj8gV2FzIE1lbmVsYXVzIGF3YXkgZnJvbSBBY2hhZWFuIEFyZ29zLCB2b3lhZ2luZyBlbHNld2hpdGhlciBhbW9uZyBtYW5raW5kLCB0aGF0IEFlZ2lzdGh1cyB0b29rIGhlYXJ0IGFuZCBraWxsZWQgQWdhbWVtbm9uPyINCg0KIkkgd2lsbCB0ZWxsIHlvdSB0cnVseSwiIGFuc3dlcmVkIE5lc3RvciwgImFuZCBpbmRlZWQgeW91IGhhdmUgeW91cnNlbGYgZGl2aW5lZCBob3cgaXQgYWxsIGhhcHBlbmVkLiBJZiBNZW5lbGF1cyB3aGVuIGhlIGdvdCBiYWNrIGZyb20gVHJveSBoYWQgZm91bmQgQWVnaXN0aHVzIHN0aWxsIGFsaXZlIGluIGhpcyBob3VzZSwgdGhlcmUgd291bGQgaGF2ZSBiZWVuIG5vIGJhcnJvdyBoZWFwZWQgdXAgZm9yIGhpbSwgbm90IGV2ZW4gd2hlbiBoZSB3YXMgZGVhZCwgYnV0IGhlIHdvdWxkIGhhdmUgYmVlbiB0aHJvd24gb3V0c2lkZSB0aGUgY2l0eSB0byBkb2dzIGFuZCB2dWx0dXJlcywgYW5kIG5vdCBhIHdvbWFuIHdvdWxkIGhhdmUgbW91cm5lZCBoaW0sIGZvciBoZSBoYWQgZG9uZSBhIGRlZWQgb2YgZ3JlYXQgd2lja2VkbmVzczsgYnV0IHdlIHdlcmUgb3ZlciB0aGVyZSwgZmlnaHRpbmcgaGFyZCBhdCBUcm95LCBhbmQgQWVnaXN0aHVzIHdobyB3YXMgdGFraW5nIGhpcyBlYXNlIHF1aWV0bHkgaW4gdGhlIGhlYXJ0IG9mIEFyZ29zLCBjYWpvbGVkIEFnYW1lbW5vbidzIHdpZmUgQ2x5dGVtbmVzdHJhIHdpdGggaW5jZXNzYW50IGZsYXR0ZXJ5Lg0KDQoiQXQgZmlyc3Qgc2hlIHdvdWxkIGhhdmUgbm90aGluZyB0byBkbyB3aXRoIGhpcyB3aWNrZWQgc2NoZW1lLCBmb3Igc2hlIHdhcyBvZiBhIGdvb2QgbmF0dXJhbCBkaXNwb3NpdGlvbjsgbW9yZW92ZXIgdGhlcmUgd2FzIGEgYmFyZCB3aXRoIGhlciwgdG8gd2hvbSBBZ2FtZW1ub24gaGFkIGdpdmVuIHN0cmljdCBvcmRlcnMgb24gc2V0dGluZyBvdXQgZm9yIFRyb3ksIHRoYXQgaGUgd2FzIHRvIGtlZXAgZ3VhcmQgb3ZlciBoaXMgd2lmZTsgYnV0IHdoZW4gaGVhdmVuIGhhZCBjb3Vuc2VsbGVkIGhlciBkZXN0cnVjdGlvbiwgQWVnaXN0aHVzIHRodXMgdGhpcyBiYXJkIG9mZiB0byBhIGRlc2VydCBpc2xhbmQgYW5kIGxlZnQgaGltIHRoZXJlIGZvciBjcm93cyBhbmQgc2VhZ3VsbHMgdG8gYmF0dGVuIHVwb24tIGFmdGVyIHdoaWNoIHNoZSB3ZW50IHdpbGxpbmdseSBlbm91Z2ggdG8gdGhlIGhvdXNlIG9mIEFlZ2lzdGh1cy4gVGhlbiBoZSBvZmZlcmVkIG1hbnkgYnVybnQgc2FjcmlmaWNlcyB0byB0aGUgZ29kcywgYW5kIGRlY29yYXRlZCBtYW55IHRlbXBsZXMgd2l0aCB0YXBlc3RyaWVzIGFuZCBnaWxkaW5nLCBmb3IgaGUgaGFkIHN1Y2NlZWRlZCBmYXIgYmV5b25kIGhpcyBleHBlY3RhdGlvbnMuDQoNCiJNZWFud2hpbGUgTWVuZWxhdXMgYW5kIEkgd2VyZSBvbiBvdXIgd2F5IGhvbWUgZnJvbSBUcm95LCBvbiBnb29kIHRlcm1zIHdpdGggb25lIGFub3RoZXIuIFdoZW4gd2UgZ290IHRvIFN1bml1bSwgd2hpY2ggaXMgdGhlIHBvaW50IG9mIEF0aGVucywgQXBvbGxvIHdpdGggaGlzIHBhaW5sZXNzIHNoYWZ0cyBraWxsZWQgUGhyb250aXMgdGhlIHN0ZWVyc21hbiBvZiBNZW5lbGF1cycgc2hpcCAoYW5kIG5ldmVyIG1hbiBrbmV3IGJldHRlciBob3cgdG8gaGFuZGxlIGEgdmVzc2VsIGluIHJvdWdoIHdlYXRoZXIpIHNvIHRoYXQgaGUgZGllZCB0aGVuIGFuZCB0aGVyZSB3aXRoIHRoZSBoZWxtIGluIGhpcyBoYW5kLCBhbmQgTWVuZWxhdXMsIHRob3VnaCB2ZXJ5IGFueGlvdXMgdG8gcHJlc3MgZm9yd2FyZCwgaGFkIHRvIHdhaXQgaW4gb3JkZXIgdG8gYnVyeSBoaXMgY29tcmFkZSBhbmQgZ2l2ZSBoaW0gaGlzIGR1ZSBmdW5lcmFsIHJpdGVzLiBQcmVzZW50bHksIHdoZW4gaGUgdG9vIGNvdWxkIHB1dCB0byBzZWEgYWdhaW4sIGFuZCBoYWQgc2FpbGVkIG9uIGFzIGZhciBhcyB0aGUgTWFsZWFuIGhlYWRzLCBKb3ZlIGNvdW5zZWxsZWQgZXZpbCBhZ2FpbnN0IGhpbSBhbmQgbWFkZSBpdCBpdCBibG93IGhhcmQgdGlsbCB0aGUgd2F2ZXMgcmFuIG1vdW50YWlucyBoaWdoLiBIZXJlIGhlIGRpdmlkZWQgaGlzIGZsZWV0IGFuZCB0b29rIHRoZSBvbmUgaGFsZiB0b3dhcmRzIENyZXRlIHdoZXJlIHRoZSBDeWRvbmlhbnMgZHdlbGwgcm91bmQgYWJvdXQgdGhlIHdhdGVycyBvZiB0aGUgcml2ZXIgSWFyZGFudXMuIFRoZXJlIGlzIGEgaGlnaCBoZWFkbGFuZCBoZXJlYWJvdXRzIHN0cmV0Y2hpbmcgb3V0IGludG8gdGhlIHNlYSBmcm9tIGEgcGxhY2UgY2FsbGVkIEdvcnR5biwgYW5kIGFsbCBhbG9uZyB0aGlzIHBhcnQgb2YgdGhlIGNvYXN0IGFzIGZhciBhcyBQaGFlc3R1cyB0aGUgc2VhIHJ1bnMgaGlnaCB3aGVuIHRoZXJlIGlzIGEgc291dGggd2luZCBibG93aW5nLCBidXQgYXJ0ZXIgUGhhZXN0dXMgdGhlIGNvYXN0IGlzIG1vcmUgcHJvdGVjdGVkLCBmb3IgYSBzbWFsbCBoZWFkbGFuZCBjYW4gbWFrZSBhIGdyZWF0IHNoZWx0ZXIuIEhlcmUgdGhpcyBwYXJ0IG9mIHRoZSBmbGVldCB3YXMgZHJpdmVuIG9uIHRvIHRoZSByb2NrcyBhbmQgd3JlY2tlZDsgYnV0IHRoZSBjcmV3cyBqdXN0IG1hbmFnZWQgdG8gc2F2ZSB0aGVtc2VsdmVzLiBBcyBmb3IgdGhlIG90aGVyIGZpdmUgc2hpcHMsIHRoZXkgd2VyZSB0YWtlbiBieSB3aW5kcyBhbmQgc2VhcyB0byBFZ3lwdCwgd2hlcmUgTWVuZWxhdXMgZ2F0aGVyZWQgbXVjaCBnb2xkIGFuZCBzdWJzdGFuY2UgYW1vbmcgcGVvcGxlIG9mIGFuIGFsaWVuIHNwZWVjaC4gTWVhbndoaWxlIEFlZ2lzdGh1cyBoZXJlIGF0IGhvbWUgcGxvdHRlZCBoaXMgZXZpbCBkZWVkLiBGb3Igc2V2ZW4geWVhcnMgYWZ0ZXIgaGUgaGFkIGtpbGxlZCBBZ2FtZW1ub24gaGUgcnVsZWQgaW4gTXljZW5lLCBhbmQgdGhlIHBlb3BsZSB3ZXJlIG9iZWRpZW50IHVuZGVyIGhpbSwgYnV0IGluIHRoZSBlaWdodGggeWVhciBPcmVzdGVzIGNhbWUgYmFjayBmcm9tIEF0aGVucyB0byBiZSBoaXMgYmFuZSwgYW5kIGtpbGxlZCB0aGUgbXVyZGVyZXIgb2YgaGlzIGZhdGhlci4gVGhlbiBoZSBjZWxlYnJhdGVkIHRoZSBmdW5lcmFsIHJpdGVzIG9mIGhpcyBtb3RoZXIgYW5kIG9mIGZhbHNlIEFlZ2lzdGh1cyBieSBhIGJhbnF1ZXQgdG8gdGhlIHBlb3BsZSBvZiBBcmdvcywgYW5kIG9uIHRoYXQgdmVyeSBkYXkgTWVuZWxhdXMgY2FtZSBob21lLCB3aXRoIGFzIG11Y2ggdHJlYXN1cmUgYXMgaGlzIHNoaXBzIGNvdWxkIGNhcnJ5Lg0KDQoiVGFrZSBteSBhZHZpY2UgdGhlbiwgYW5kIGRvIG5vdCBnbyB0cmF2ZWxsaW5nIGFib3V0IGZvciBsb25nIHNvIGZhciBmcm9tIGhvbWUsIG5vciBsZWF2ZSB5b3VyIHByb3BlcnR5IHdpdGggc3VjaCBkYW5nZXJvdXMgcGVvcGxlIGluIHlvdXIgaG91c2U7IHRoZXkgd2lsbCBlYXQgdXAgZXZlcnl0aGluZyB5b3UgaGF2ZSBhbW9uZyB0aGVtLCBhbmQgeW91IHdpbGwgaGF2ZSBiZWVuIG9uIGEgZm9vbCdzIGVycmFuZC4gU3RpbGwsIEkgc2hvdWxkIGFkdmlzZSB5b3UgYnkgYWxsIG1lYW5zIHRvIGdvIGFuZCB2aXNpdCBNZW5lbGF1cywgd2hvIGhhcyBsYXRlbHkgY29tZSBvZmYgYSB2b3lhZ2UgYW1vbmcgc3VjaCBkaXN0YW50IHBlb3BsZXMgYXMgbm8gbWFuIGNvdWxkIGV2ZXIgaG9wZSB0byBnZXQgYmFjayBmcm9tLCB3aGVuIHRoZSB3aW5kcyBoYWQgb25jZSBjYXJyaWVkIGhpbSBzbyBmYXIgb3V0IG9mIGhpcyByZWNrb25pbmc7IGV2ZW4gYmlyZHMgY2Fubm90IGZseSB0aGUgZGlzdGFuY2UgaW4gYSB0d2VsdmVtb250aCwgc28gdmFzdCBhbmQgdGVycmlibGUgYXJlIHRoZSBzZWFzIHRoYXQgdGhleSBtdXN0IGNyb3NzLiBHbyB0byBoaW0sIHRoZXJlZm9yZSwgYnkgc2VhLCBhbmQgdGFrZSB5b3VyIG93biBtZW4gd2l0aCB5b3U7IG9yIGlmIHlvdSB3b3VsZCByYXRoZXIgdHJhdmVsIGJ5IGxhbmQgeW91IGNhbiBoYXZlIGEgY2hhcmlvdCwgeW91IGNhbiBoYXZlIGhvcnNlcywgYW5kIGhlcmUgYXJlIG15IHNvbnMgd2hvIGNhbiBlc2NvcnQgeW91IHRvIExhY2VkYWVtb24gd2hlcmUgTWVuZWxhdXMgbGl2ZXMuIEJlZyBvZiBoaW0gdG8gc3BlYWsgdGhlIHRydXRoLCBhbmQgaGUgd2lsbCB0ZWxsIHlvdSBubyBsaWVzLCBmb3IgaGUgaXMgYW4gZXhjZWxsZW50IHBlcnNvbi4iDQoNCkFzIGhlIHNwb2tlIHRoZSBzdW4gc2V0IGFuZCBpdCBjYW1lIG9uIGRhcmssIHdoZXJlb24gTWluZXJ2YSBzYWlkLCAiU2lyLCBhbGwgdGhhdCB5b3UgaGF2ZSBzYWlkIGlzIHdlbGw7IG5vdywgaG93ZXZlciwgb3JkZXIgdGhlIHRvbmd1ZXMgb2YgdGhlIHZpY3RpbXMgdG8gYmUgY3V0LCBhbmQgbWl4IHdpbmUgdGhhdCB3ZSBtYXkgbWFrZSBkcmluay1vZmZlcmluZ3MgdG8gTmVwdHVuZSwgYW5kIHRoZSBvdGhlciBpbW1vcnRhbHMsIGFuZCB0aGVuIGdvIHRvIGJlZCwgZm9yIGl0IGlzIGJlZCB0aW1lLiBQZW9wbGUgc2hvdWxkIGdvIGF3YXkgZWFybHkgYW5kIG5vdCBrZWVwIGxhdGUgaG91cnMgYXQgYSByZWxpZ2lvdXMgZmVzdGl2YWwuIg0KDQpUaHVzIHNwb2tlIHRoZSBkYXVnaHRlciBvZiBKb3ZlLCBhbmQgdGhleSBvYmV5ZWQgaGVyIHNheWluZy4gTWVuIHNlcnZhbnRzIHBvdXJlZCB3YXRlciBvdmVyIHRoZSBoYW5kcyBvZiB0aGUgZ3Vlc3RzLCB3aGlsZSBwYWdlcyBmaWxsZWQgdGhlIG1peGluZy1ib3dscyB3aXRoIHdpbmUgYW5kIHdhdGVyLCBhbmQgaGFuZGVkIGl0IHJvdW5kIGFmdGVyIGdpdmluZyBldmVyeSBtYW4gaGlzIGRyaW5rLW9mZmVyaW5nOyB0aGVuIHRoZXkgdGhyZXcgdGhlIHRvbmd1ZXMgb2YgdGhlIHZpY3RpbXMgaW50byB0aGUgZmlyZSwgYW5kIHN0b29kIHVwIHRvIG1ha2UgdGhlaXIgZHJpbmstb2ZmZXJpbmdzLiBXaGVuIHRoZXkgaGFkIG1hZGUgdGhlaXIgb2ZmZXJpbmdzIGFuZCBoYWQgZHJ1bmsgZWFjaCBhcyBtdWNoIGFzIGhlIHdhcyBtaW5kZWQsIE1pbmVydmEgYW5kIFRlbGVtYWNodXMgd2VyZSBmb3Jnb2luZyBvbiBib2FyZCB0aGVpciBzaGlwLCBidXQgTmVzdG9yIGNhdWdodCB0aGVtIHVwIGF0IG9uY2UgYW5kIHN0YXllZCB0aGVtLg0KDQoiSGVhdmVuIGFuZCB0aGUgaW1tb3J0YWwgZ29kcywiIGhlIGV4Y2xhaW1lZCwgImZvcmJpZCB0aGF0IHlvdSBzaG91bGQgbGVhdmUgbXkgaG91c2UgdG8gZ28gb24gYm9hcmQgb2YgYSBzaGlwLiBEbyB5b3UgdGhpbmsgSSBhbSBzbyBwb29yIGFuZCBzaG9ydCBvZiBjbG90aGVzLCBvciB0aGF0IEkgaGF2ZSBzbyBmZXcgY2xvYWtzIGFuZCBhcyB0byBiZSB1bmFibGUgdG8gZmluZCBjb21mb3J0YWJsZSBiZWRzIGJvdGggZm9yIG15c2VsZiBhbmQgZm9yIG15IGd1ZXN0cz8gTGV0IG1lIHRlbGwgeW91IEkgaGF2ZSBzdG9yZSBib3RoIG9mIHJ1Z3MgYW5kIGNsb2FrcywgYW5kIHNoYWxsIG5vdCBwZXJtaXQgdGhlIHNvbiBvZiBteSBvbGQgZnJpZW5kIFVseXNzZXMgdG8gY2FtcCBkb3duIG9uIHRoZSBkZWNrIG9mIGEgc2hpcC0gbm90IHdoaWxlIEkgbGl2ZS0gbm9yIHlldCB3aWxsIG15IHNvbnMgYWZ0ZXIgbWUsIGJ1dCB0aGV5IHdpbGwga2VlcCBvcGVuIGhvdXNlIGFzIGhhdmUgZG9uZS4iDQoNClRoZW4gTWluZXJ2YSBhbnN3ZXJlZCwgIlNpciwgeW91IGhhdmUgc3Bva2VuIHdlbGwsIGFuZCBpdCB3aWxsIGJlIG11Y2ggYmV0dGVyIHRoYXQgVGVsZW1hY2h1cyBzaG91bGQgZG8gYXMgeW91IGhhdmUgc2FpZDsgaGUsIHRoZXJlZm9yZSwgc2hhbGwgcmV0dXJuIHdpdGggeW91IGFuZCBzbGVlcCBhdCB5b3VyIGhvdXNlLCBidXQgSSBtdXN0IGdvIGJhY2sgdG8gZ2l2ZSBvcmRlcnMgdG8gbXkgY3JldywgYW5kIGtlZXAgdGhlbSBpbiBnb29kIGhlYXJ0LiBJIGFtIHRoZSBvbmx5IG9sZGVyIHBlcnNvbiBhbW9uZyB0aGVtOyB0aGUgcmVzdCBhcmUgYWxsIHlvdW5nIG1lbiBvZiBUZWxlbWFjaHVzJyBvd24gYWdlLCB3aG8gaGF2ZSB0YWtlbiB0aGlzIHZveWFnZSBvdXQgb2YgZnJpZW5kc2hpcDsgc28gSSBtdXN0IHJldHVybiB0byB0aGUgc2hpcCBhbmQgc2xlZXAgdGhlcmUuIE1vcmVvdmVyIHRvLW1vcnJvdyBJIG11c3QgZ28gdG8gdGhlIENhdWNvbmlhbnMgd2hlcmUgSSBoYXZlIGEgbGFyZ2Ugc3VtIG9mIG1vbmV5IGxvbmcgb3dpbmcgdG8gbWUuIEFzIGZvciBUZWxlbWFjaHVzLCBub3cgdGhhdCBoZSBpcyB5b3VyIGd1ZXN0LCBzZW5kIGhpbSB0byBMYWNlZGFlbW9uIGluIGEgY2hhcmlvdCwgYW5kIGxldCBvbmUgb2YgeW91ciBzb25zIGdvIHdpdGggaGltLiBCZSBwbGVhc2VkIGFsc28gdG8gcHJvdmlkZSBoaW0gd2l0aCB5b3VyIGJlc3QgYW5kIGZsZWV0ZXN0IGhvcnNlcy4iDQoNCldoZW4gc2hlIGhhZCB0aHVzIHNwb2tlbiwgc2hlIGZsZXcgYXdheSBpbiB0aGUgZm9ybSBvZiBhbiBlYWdsZSwgYW5kIGFsbCBtYXJ2ZWxsZWQgYXMgdGhleSBiZWhlbGQgaXQuIE5lc3RvciB3YXMgYXN0b25pc2hlZCwgYW5kIHRvb2sgVGVsZW1hY2h1cyBieSB0aGUgaGFuZC4gIk15IGZyaWVuZCwiIHNhaWQgaGUsICJJIHNlZSB0aGF0IHlvdSBhcmUgZ29pbmcgdG8gYmUgYSBncmVhdCBoZXJvIHNvbWUgZGF5LCBzaW5jZSB0aGUgZ29kcyB3YWl0IHVwb24geW91IHRodXMgd2hpbGUgeW91IGFyZSBzdGlsbCBzbyB5b3VuZy4gVGhpcyBjYW4gaGF2ZSBiZWVuIG5vbmUgb3RoZXIgb2YgdGhvc2Ugd2hvIGR3ZWxsIGluIGhlYXZlbiB0aGFuIEpvdmUncyByZWRvdWJ0YWJsZSBkYXVnaHRlciwgdGhlIFRyaXRvLWJvcm4sIHdobyBzaG93ZWQgc3VjaCBmYXZvdXIgdG93YXJkcyB5b3VyIGJyYXZlIGZhdGhlciBhbW9uZyB0aGUgQXJnaXZlcy4iICJIb2x5IHF1ZWVuLCIgaGUgY29udGludWVkLCAidm91Y2hzYWZlIHRvIHNlbmQgZG93biB0aHkgZ3JhY2UgdXBvbiBteXNlbGYsIG15IGdvb2Qgd2lmZSwgYW5kIG15IGNoaWxkcmVuLiBJbiByZXR1cm4sIEkgd2lsbCBvZmZlciB5b3UgaW4gc2FjcmlmaWNlIGEgYnJvYWQtYnJvd2VkIGhlaWZlciBvZiBhIHllYXIgb2xkLCB1bmJyb2tlbiwgYW5kIG5ldmVyIHlldCBicm91Z2h0IGJ5IG1hbiB1bmRlciB0aGUgeW9rZS4gSSB3aWxsIGdpbGQgaGVyIGhvcm5zLCBhbmQgd2lsbCBvZmZlciBoZXIgdXAgdG8geW91IGluIHNhY3JpZmljZS4iDQoNClRodXMgZGlkIGhlIHByYXksIGFuZCBNaW5lcnZhIGhlYXJkIGhpcyBwcmF5ZXIuIEhlIHRoZW4gbGVkIHRoZSB3YXkgdG8gaGlzIG93biBob3VzZSwgZm9sbG93ZWQgYnkgaGlzIHNvbnMgYW5kIHNvbnMtaW4tbGF3LiBXaGVuIHRoZXkgaGFkIGdvdCB0aGVyZSBhbmQgaGFkIHRha2VuIHRoZWlyIHBsYWNlcyBvbiB0aGUgYmVuY2hlcyBhbmQgc2VhdHMsIGhlIG1peGVkIHRoZW0gYSBib3dsIG9mIHN3ZWV0IHdpbmUgdGhhdCB3YXMgZWxldmVuIHllYXJzIG9sZCB3aGVuIHRoZSBob3VzZWtlZXBlciB0b29rIHRoZSBsaWQgb2ZmIHRoZSBqYXIgdGhhdCBoZWxkIGl0LiBBcyBoZSBtaXhlZCB0aGUgd2luZSwgaGUgcHJheWVkIG11Y2ggYW5kIG1hZGUgZHJpbmstb2ZmZXJpbmdzIHRvIE1pbmVydmEsIGRhdWdodGVyIG9mIEFlZ2lzLWJlYXJpbmcgSm92ZS4gVGhlbiwgd2hlbiB0aGV5IGhhZCBtYWRlIHRoZWlyIGRyaW5rLW9mZmVyaW5ncyBhbmQgaGFkIGRydW5rIGVhY2ggYXMgbXVjaCBhcyBoZSB3YXMgbWluZGVkLCB0aGUgb3RoZXJzIHdlbnQgaG9tZSB0byBiZWQgZWFjaCBpbiBoaXMgb3duIGFib2RlOyBidXQgTmVzdG9yIHB1dCBUZWxlbWFjaHVzIHRvIHNsZWVwIGluIHRoZSByb29tIHRoYXQgd2FzIG92ZXIgdGhlIGdhdGV3YXkgYWxvbmcgd2l0aCBQaXNpc3RyYXR1cywgd2hvIHdhcyB0aGUgb25seSB1bm1hcnJpZWQgc29uIG5vdyBsZWZ0IGhpbS4gQXMgZm9yIGhpbXNlbGYsIGhlIHNsZXB0IGluIGFuIGlubmVyIHJvb20gb2YgdGhlIGhvdXNlLCB3aXRoIHRoZSBxdWVlbiBoaXMgd2lmZSBieSBoaXMgc2lkZS4NCg0KTm93IHdoZW4gdGhlIGNoaWxkIG9mIG1vcm5pbmcsIHJvc3ktZmluZ2VyZWQgRGF3biwgYXBwZWFyZWQsIE5lc3RvciBsZWZ0IGhpcyBjb3VjaCBhbmQgdG9vayBoaXMgc2VhdCBvbiB0aGUgYmVuY2hlcyBvZiB3aGl0ZSBhbmQgcG9saXNoZWQgbWFyYmxlIHRoYXQgc3Rvb2QgaW4gZnJvbnQgb2YgaGlzIGhvdXNlLiBIZXJlIGFmb3JldGltZSBzYXQgTmVsZXVzLCBwZWVyIG9mIGdvZHMgaW4gY291bnNlbCwgYnV0IGhlIHdhcyBub3cgZGVhZCwgYW5kIGhhZCBnb25lIHRvIHRoZSBob3VzZSBvZiBIYWRlczsgc28gTmVzdG9yIHNhdCBpbiBoaXMgc2VhdCwgc2NlcHRyZSBpbiBoYW5kLCBhcyBndWFyZGlhbiBvZiB0aGUgcHVibGljIHdlYWwuIEhpcyBzb25zIGFzIHRoZXkgbGVmdCB0aGVpciByb29tcyBnYXRoZXJlZCByb3VuZCBoaW0sIEVjaGVwaHJvbiwgU3RyYXRpdXMsIFBlcnNldXMsIEFyZXR1cywgYW5kIFRocmFzeW1lZGVzOyB0aGUgc2l4dGggc29uIHdhcyBQaXNpc3RyYXR1cywgYW5kIHdoZW4gVGVsZW1hY2h1cyBqb2luZWQgdGhlbSB0aGV5IG1hZGUgaGltIHNpdCB3aXRoIHRoZW0uIE5lc3RvciB0aGVuIGFkZHJlc3NlZCB0aGVtLg0KDQoiTXkgc29ucywiIHNhaWQgaGUsICJtYWtlIGhhc3RlIHRvIGRvIGFzIEkgc2hhbGwgYmlkIHlvdS4gSSB3aXNoIGZpcnN0IGFuZCBmb3JlbW9zdCB0byBwcm9waXRpYXRlIHRoZSBncmVhdCBnb2RkZXNzIE1pbmVydmEsIHdobyBtYW5pZmVzdGVkIGhlcnNlbGYgdmlzaWJseSB0byBtZSBkdXJpbmcgeWVzdGVyZGF5J3MgZmVzdGl2aXRpZXMuIEdvLCB0aGVuLCBvbmUgb3Igb3RoZXIgb2YgeW91IHRvIHRoZSBwbGFpbiwgdGVsbCB0aGUgc3RvY2ttYW4gdG8gbG9vayBtZSBvdXQgYSBoZWlmZXIsIGFuZCBjb21lIG9uIGhlcmUgd2l0aCBpdCBhdCBvbmNlLiBBbm90aGVyIG11c3QgZ28gdG8gVGVsZW1hY2h1cydzIHNoaXAsIGFuZCBpbnZpdGUgYWxsIHRoZSBjcmV3LCBsZWF2aW5nIHR3byBtZW4gb25seSBpbiBjaGFyZ2Ugb2YgdGhlIHZlc3NlbC4gU29tZSBvbmUgZWxzZSB3aWxsIHJ1biBhbmQgZmV0Y2ggTGFlcmNldXMgdGhlIGdvbGRzbWl0aCB0byBnaWxkIHRoZSBob3JucyBvZiB0aGUgaGVpZmVyLiBUaGUgcmVzdCwgc3RheSBhbGwgb2YgeW91IHdoZXJlIHlvdSBhcmU7IHRlbGwgdGhlIG1haWRzIGluIHRoZSBob3VzZSB0byBwcmVwYXJlIGFuIGV4Y2VsbGVudCBkaW5uZXIsIGFuZCB0byBmZXRjaCBzZWF0cywgYW5kIGxvZ3Mgb2Ygd29vZCBmb3IgYSBidXJudCBvZmZlcmluZy4gVGVsbCB0aGVtIGFsc28tIHRvIGJyaW5nIG1lIHNvbWUgY2xlYXIgc3ByaW5nIHdhdGVyLiINCg0KT24gdGhpcyB0aGV5IGh1cnJpZWQgb2ZmIG9uIHRoZWlyIHNldmVyYWwgZXJyYW5kcy4gVGhlIGhlaWZlciB3YXMgYnJvdWdodCBpbiBmcm9tIHRoZSBwbGFpbiwgYW5kIFRlbGVtYWNodXMncyBjcmV3IGNhbWUgZnJvbSB0aGUgc2hpcDsgdGhlIGdvbGRzbWl0aCBicm91Z2h0IHRoZSBhbnZpbCwgaGFtbWVyLCBhbmQgdG9uZ3MsIHdpdGggd2hpY2ggaGUgd29ya2VkIGhpcyBnb2xkLCBhbmQgTWluZXJ2YSBoZXJzZWxmIGNhbWUgdG8gdGhlIHNhY3JpZmljZS4gTmVzdG9yIGdhdmUgb3V0IHRoZSBnb2xkLCBhbmQgdGhlIHNtaXRoIGdpbGRlZCB0aGUgaG9ybnMgb2YgdGhlIGhlaWZlciB0aGF0IHRoZSBnb2RkZXNzIG1pZ2h0IGhhdmUgcGxlYXN1cmUgaW4gdGhlaXIgYmVhdXR5LiBUaGVuIFN0cmF0aXVzIGFuZCBFY2hlcGhyb24gYnJvdWdodCBoZXIgaW4gYnkgdGhlIGhvcm5zOyBBcmV0dXMgZmV0Y2hlZCB3YXRlciBmcm9tIHRoZSBob3VzZSBpbiBhIGV3ZXIgdGhhdCBoYWQgYSBmbG93ZXIgcGF0dGVybiBvbiBpdCwgYW5kIGluIGhpcyBvdGhlciBoYW5kIGhlIGhlbGQgYSBiYXNrZXQgb2YgYmFybGV5IG1lYWw7IHN0dXJkeSBUaHJhc3ltZWRlcyBzdG9vZCBieSB3aXRoIGEgc2hhcnAgYXhlLCByZWFkeSB0byBzdHJpa2UgdGhlIGhlaWZlciwgd2hpbGUgUGVyc2V1cyBoZWxkIGEgYnVja2V0LiBUaGVuIE5lc3RvciBiZWdhbiB3aXRoIHdhc2hpbmcgaGlzIGhhbmRzIGFuZCBzcHJpbmtsaW5nIHRoZSBiYXJsZXkgbWVhbCwgYW5kIGhlIG9mZmVyZWQgbWFueSBhIHByYXllciB0byBNaW5lcnZhIGFzIGhlIHRocmV3IGEgbG9jayBmcm9tIHRoZSBoZWlmZXIncyBoZWFkIHVwb24gdGhlIGZpcmUuDQoNCldoZW4gdGhleSBoYWQgZG9uZSBwcmF5aW5nIGFuZCBzcHJpbmtsaW5nIHRoZSBiYXJsZXkgbWVhbCBUaHJhc3ltZWRlcyBkZWFsdCBoaXMgYmxvdywgYW5kIGJyb3VnaHQgdGhlIGhlaWZlciBkb3duIHdpdGggYSBzdHJva2UgdGhhdCBjdXQgdGhyb3VnaCB0aGUgdGVuZG9ucyBhdCB0aGUgYmFzZSBvZiBoZXIgbmVjaywgd2hlcmVvbiB0aGUgZGF1Z2h0ZXJzIGFuZCBkYXVnaHRlcnMtaW4tbGF3IG9mIE5lc3RvciwgYW5kIGhpcyB2ZW5lcmFibGUgd2lmZSBFdXJ5ZGljZSAoc2hlIHdhcyBlbGRlc3QgZGF1Z2h0ZXIgdG8gQ2x5bWVudXMpIHNjcmVhbWVkIHdpdGggZGVsaWdodC4gVGhlbiB0aGV5IGxpZnRlZCB0aGUgaGVpZmVyJ3MgaGVhZCBmcm9tIG9mZiB0aGUgZ3JvdW5kLCBhbmQgUGlzaXN0cmF0dXMgY3V0IGhlciB0aHJvYXQuIFdoZW4gc2hlIGhhZCBkb25lIGJsZWVkaW5nIGFuZCB3YXMgcXVpdGUgZGVhZCwgdGhleSBjdXQgaGVyIHVwLiBUaGV5IGN1dCBvdXQgdGhlIHRoaWdoIGJvbmVzIGFsbCBpbiBkdWUgY291cnNlLCB3cmFwcGVkIHRoZW0gcm91bmQgaW4gdHdvIGxheWVycyBvZiBmYXQsIGFuZCBzZXQgc29tZSBwaWVjZXMgb2YgcmF3IG1lYXQgb24gdGhlIHRvcCBvZiB0aGVtOyB0aGVuIE5lc3RvciBsYWlkIHRoZW0gdXBvbiB0aGUgd29vZCBmaXJlIGFuZCBwb3VyZWQgd2luZSBvdmVyIHRoZW0sIHdoaWxlIHRoZSB5b3VuZyBtZW4gc3Rvb2QgbmVhciBoaW0gd2l0aCBmaXZlLXByb25nZWQgc3BpdHMgaW4gdGhlaXIgaGFuZHMuIFdoZW4gdGhlIHRoaWdocyB3ZXJlIGJ1cm5lZCBhbmQgdGhleSBoYWQgdGFzdGVkIHRoZSBpbndhcmQgbWVhdHMsIHRoZXkgY3V0IHRoZSByZXN0IG9mIHRoZSBtZWF0IHVwIHNtYWxsLCBwdXQgdGhlIHBpZWNlcyBvbiB0aGUgc3BpdHMgYW5kIHRvYXN0ZWQgdGhlbSBvdmVyIHRoZSBmaXJlLg0KDQpNZWFud2hpbGUgbG92ZWx5IFBvbHljYXN0ZSwgTmVzdG9yJ3MgeW91bmdlc3QgZGF1Z2h0ZXIsIHdhc2hlZCBUZWxlbWFjaHVzLiBXaGVuIHNoZSBoYWQgd2FzaGVkIGhpbSBhbmQgYW5vaW50ZWQgaGltIHdpdGggb2lsLCBzaGUgYnJvdWdodCBoaW0gYSBmYWlyIG1hbnRsZSBhbmQgc2hpcnQsIGFuZCBoZSBsb29rZWQgbGlrZSBhIGdvZCBhcyBoZSBjYW1lIGZyb20gdGhlIGJhdGggYW5kIHRvb2sgaGlzIHNlYXQgYnkgdGhlIHNpZGUgb2YgTmVzdG9yLiBXaGVuIHRoZSBvdXRlciBtZWF0cyB3ZXJlIGRvbmUgdGhleSBkcmV3IHRoZW0gb2ZmIHRoZSBzcGl0cyBhbmQgc2F0IGRvd24gdG8gZGlubmVyIHdoZXJlIHRoZXkgd2VyZSB3YWl0ZWQgdXBvbiBieSBzb21lIHdvcnRoeSBoZW5jaG1lbiwgd2hvIGtlcHQgcG91cmluZyB0aGVtIG91dCB0aGVpciB3aW5lIGluIGN1cHMgb2YgZ29sZC4gQXMgc29vbiBhcyB0aGV5IGhhZCBoYWQgaGFkIGVub3VnaCB0byBlYXQgYW5kIGRyaW5rIE5lc3RvciBzYWlkLCAiU29ucywgcHV0IFRlbGVtYWNodXMncyBob3JzZXMgdG8gdGhlIGNoYXJpb3QgdGhhdCBoZSBtYXkgc3RhcnQgYXQgb25jZS4iDQoNClRodXMgZGlkIGhlIHNwZWFrLCBhbmQgdGhleSBkaWQgZXZlbiBhcyBoZSBoYWQgc2FpZCwgYW5kIHlva2VkIHRoZSBmbGVldCBob3JzZXMgdG8gdGhlIGNoYXJpb3QuIFRoZSBob3VzZWtlZXBlciBwYWNrZWQgdGhlbSB1cCBhIHByb3Zpc2lvbiBvZiBicmVhZCwgd2luZSwgYW5kIHN3ZWV0bWVhdHMgZml0IGZvciB0aGUgc29ucyBvZiBwcmluY2VzLiBUaGVuIFRlbGVtYWNodXMgZ290IGludG8gdGhlIGNoYXJpb3QsIHdoaWxlIFBpc2lzdHJhdHVzIGdhdGhlcmVkIHVwIHRoZSByZWlucyBhbmQgdG9vayBoaXMgc2VhdCBiZXNpZGUgaGltLiBIZSBsYXNoZWQgdGhlIGhvcnNlcyBvbiBhbmQgdGhleSBmbGV3IGZvcndhcmQgbm90aGluZyBsb3RoIGludG8gdGhlIG9wZW4gY291bnRyeSwgbGVhdmluZyB0aGUgaGlnaCBjaXRhZGVsIG9mIFB5bG9zIGJlaGluZCB0aGVtLiBBbGwgdGhhdCBkYXkgZGlkIHRoZXkgdHJhdmVsLCBzd2F5aW5nIHRoZSB5b2tlIHVwb24gdGhlaXIgbmVja3MgdGlsbCB0aGUgc3VuIHdlbnQgZG93biBhbmQgZGFya25lc3Mgd2FzIG92ZXIgYWxsIHRoZSBsYW5kLiBUaGVuIHRoZXkgcmVhY2hlZCBQaGVyYWUgd2hlcmUgRGlvY2xlcyBsaXZlZCwgd2hvIHdhcyBzb24gdG8gT3J0aWxvY2h1cyBhbmQgZ3JhbmRzb24gdG8gQWxwaGV1cy4gSGVyZSB0aGV5IHBhc3NlZCB0aGUgbmlnaHQgYW5kIERpb2NsZXMgZW50ZXJ0YWluZWQgdGhlbSBob3NwaXRhYmx5LiBXaGVuIHRoZSBjaGlsZCBvZiBtb3JuaW5nLCByb3N5LWZpbmdlcmVkIERhd247IGFwcGVhcmVkLCB0aGV5IGFnYWluIHlva2VkIHRoZWlyIGhvcnNlcyBhbmQgZHJvdmUgb3V0IHRocm91Z2ggdGhlIGdhdGV3YXkgdW5kZXIgdGhlIGVjaG9pbmcgZ2F0ZWhvdXNlLiBQaXNpc3RyYXR1cyBsYXNoZWQgdGhlIGhvcnNlcyBvbiBhbmQgdGhleSBmbGV3IGZvcndhcmQgbm90aGluZyBsb3RoOyBwcmVzZW50bHkgdGhleSBjYW1lIHRvIHRoZSBjb3JuIGxhbmRzIE9mIHRoZSBvcGVuIGNvdW50cnksIGFuZCBpbiB0aGUgY291cnNlIG9mIHRpbWUgY29tcGxldGVkIHRoZWlyIGpvdXJuZXksIHNvIHdlbGwgZGlkIHRoZWlyIHN0ZWVkcyB0YWtlIHRoZW0uDQoNCk5vdyB3aGVuIHRoZSBzdW4gaGFkIHNldCBhbmQgZGFya25lc3Mgd2FzIG92ZXIgdGhlIGxhbmQu",
      "timestamp": "2014-09-07T22:39:54.022Z"
    }
  ]
}</code></pre>

    <step type='http'>
<code class='hidden'>DELETE /imposters/5555 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json</code>
    </step>
</testScenario>

<h3>Supporting large text requests</h3>

<p>HTTP is an application protocol built on TCP that typically specifies the end of request using
the <code>Content-Length</code> header. Of course, you would normally use mountebank's native
<a href='/docs/protocols/http'>http protocol</a>, but it makes a reasonably complex example.
We start by creating the <code>endOfRequestResolver</code> function, which looks like the
function below. This is overly simplistic for parsing HTTP, but illustrates the point.</p>

<pre><code>function (requestData, logger) {
    var bodyLength = parseInt(/Content-Length: (\d+)/.exec(requestData)[1]),
        headerEndIndex = requestData.indexOf('\n\n'),
        body = requestData.slice(headerEndIndex + 2);

    logger.info('Content-Length: ' + bodyLength + ', so far: ' + body.length);
    return body.length >= bodyLength;
}</code></pre>

<p>We use that function in creating the imposter:</p>

<pre><code>POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 4545,
  "protocol": "tcp",
  "mode": "text",
  "stubs": [
    {
      "responses": [{ "is": { "data": "HTTP/1.1 200 OK\nTransfer-Encoding:chunked\n\n" } }]
    }
  ],
  "endOfRequestResolver": {
    "inject": "function (requestData, logger) { var bodyLength = parseInt(/Content-Length: (\\d+)/.exec(requestData)[1]), headerEndIndex = requestData.indexOf('\\n\\n'), body = requestData.slice(headerEndIndex + 2); logger.info('Content-Length: ' + bodyLength + ', so far: ' + body.length); return body.length >= bodyLength; }"
  }
}</code></pre>

<p>We'll send a large HTTP body (greater than 65,000 bytes, which is the largest possible TCP packet size) to try out our function.
We'll borrow from some of <a href='http://classics.mit.edu/Homer/odyssey.html'>Homer's loquaciousness</a> to get us a
large enough payload.</p>

<pre><code>cat &lt;&lt; EOF &gt; request.txt
POST / HTTP/1.1
Host: localhost:4545
Content-Length: 68134
Content-Type: text/plain

Book I

Tell me, O muse [insert rest of text here]..
EOF

cat request.txt | nc localhost 4545</code></pre>

<p>To understand the problem, here's a taste of what the imposter looks like without the
<code>endOfRequestResolver</code>.  Notice that it captured multiple requests even though
only one logical request was actually sent:</p>

<pre><code>HTTP/1.1 200 OK
Vary: Accept
Date: Sun, 11 Jan 2015 16:59:33 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 138346
Connection: keep-alive

{
  "protocol": "tcp",
  "port": 4545,
  "numberOfRequests": 2,
  "mode": "text",
  "requests": [
    {
      "requestFrom": "::1:60590",
      "requestFrom": "::1",
      "data": "POST / HTTP/1.1\nHost: localhost:4545\nContent-Length: 68134\nContent-Type: text/plain\n\nBook I\n\nTell me, O muse [lots of words]...",
      "timestamp": "2015-01-11T16:59:33.022Z"
    },
    {
      "requestFrom": "::1:60590",
      "requestFrom": "::1",
      "data": "upon the fire.\n\nWhen they had done praying and sprinkling the barley meal [lots more words]...",
      "timestamp": "2015-01-11T16:59:33.022Z"
    }
  ]
}</code></pre>

<p>Let's <code>GET</code> our imposter to verify only one request was captured.</p>

<pre><code>GET /imposters/4545 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json</code></pre>

<pre><code>HTTP/1.1 200 OK
Vary: Accept
Content-Type: application/json; charset=utf-8
Content-Length: <volatile>137982</volatile>
Date: <volatile>Sun, 11 Jan 2015 16:59:33 GMT</volatile>
Connection: keep-alive

{
  "protocol": "tcp",
  "port": 4545,
  "numberOfRequests": 1,
  "recordRequests": false,
  "mode": "text",
  "requests": [
    {
      "requestFrom": "<volatile>::1:60590</volatile>",
      "ip": "<volatile>::1</volatile>",
      "data": "POST / HTTP/1.1\nHost: localhost:4545\nContent-Length: 68134\nContent-Type: text/plain\n\nBook I\n\nTell me, O muse, [lots of words]...",
      "timestamp": "<volatile>2015-01-11T16:59:33.022Z</volatile>"
    }
  ],
  "stubs": [
    {
      "responses": [
        {
          "is": {
            "data": "HTTP/1.1 200 OK\nTransfer-Encoding:chunked\n\n"
          }
        }
      ],
      "matches": [
        {
          "timestamp": "<volatile>2015-09-07T22:34:57.429Z</volatile>",
          "request": {
            "requestFrom": "<volatile>::1:60590</volatile>",
            "ip": "<volatile>::1</volatile>",
            "data": "POST / HTTP/1.1\nHost: localhost:4545\nContent-Length: 68134\nContent-Type: text/plain\n\nBook I\n\nTell me, O muse, [lots of words]..."
          },
          "response": {
            "data": "HTTP/1.1 200 OK\nTransfer-Encoding:chunked\n\n"
          }
        }
      ]
    }
  ],
  "_links": {
    "self": {
      "href": "http://localhost:<%= port %>/imposters/4545"
    }
  }
}</code></pre>

<p>The tcp protocol is a wonderful general purpose protocol, but can get tricky to map the application protocol
message length to make it work.  As always, let <a href='/support'>mountebank know if he can help</a>.</p>

<% include ../../_footer %>
