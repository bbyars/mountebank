#!/usr/bin/env node

'use strict';

var mountebank = require('../src/mountebank'),
    fs = require('fs'),
    path = require('path'),
    http = require('http'),
    Q = require('q'),
    ejs = require('ejs'),
    yargs = require('yargs');

function error (message) {
    console.error(message + '\n');
    yargs.showHelp();
    process.exit(1);
}

function processExists (pid) {
    try {
        // "As a special case, signal 0 can be used to test existence of process"
        // https://nodejs.org/api/process.html#process_process_kill_pid_signal
        process.kill(pid, 0);
        return true;
    }
    catch (e) {
        return false;
    }
}

function shouldLoadConfigFile (options) {
    return typeof options.configfile !== 'undefined';
}

function putConfig (options, body) {
    var deferred = Q.defer(),
        requestOptions = {
            method: 'PUT',
            path: '/imposters',
            port: options.port,
            hostname: 'localhost',
            headers: {
                'Content-Type': 'application/json',
                Connection: 'close'
            }
        },
        request = http.request(requestOptions, function (response) {
            response.body = '';
            response.setEncoding('utf8');
            response.on('data', function (chunk) { response.body += chunk; });
            response.on('end', function () {
                response.body = JSON.parse(response.body);
                deferred.resolve(response);
            });
        });

    request.on('error', deferred.reject);

    request.write(body);
    request.end();
    return deferred.promise;
}

function getConfig (options) {
    var deferred = Q.defer(),
        requestOptions = {
            method: 'GET',
            path: '/imposters?replayable=true',
            port: options.port,
            hostname: 'localhost',
            headers: {
                'Content-Type': 'application/json',
                Connection: 'close'
            }
        },
        request;

    if (options.removeProxies) {
        requestOptions.path += '&removeProxies=true';
    }

    request = http.request(requestOptions, function (response) {
        response.body = '';
        response.setEncoding('utf8');
        response.on('data', function (chunk) { response.body += chunk; });
        response.on('end', function () {
            deferred.resolve(response);
        });
    });

    request.on('error', deferred.reject);

    request.end();
    return deferred.promise;
}

function stringify (filename, includeFile) {
    var resolvedPath = path.join(path.dirname(filename), includeFile),
        contents = fs.readFileSync(resolvedPath, 'utf8'),
        rendered = ejs.render(contents, {
            filename: filename,
            stringify: stringify,
            inject: stringify       // backwards compatibility
        }),
        jsonString = JSON.stringify(rendered);

    // get rid of the surrounding quotes because it makes the templates more natural to quote them there
    return jsonString.substring(1, jsonString.length - 1);
}

function getContentsOrExit (file, server) {
    try {
        return fs.readFileSync(file, 'utf8');
    }
    catch (e) {
        var message = 'No such file: ' + file;
        if (e.code !== 'ENOENT') {
            message = e;

        }

        server.close(function () { });
        console.error(message);
        process.exit(1);

        return '';
    }
}

function loadConfig (options, server) {
    if (!shouldLoadConfigFile(options)) {
        return Q(true);
    }

    var configContents = getContentsOrExit(options.configfile, server),
        parsedContents = options.noParse ? configContents : ejs.render(configContents, {
            filename: options.configfile,
            stringify: stringify,
            inject: stringify       // backwards compatibility
        }),
        json = JSON.parse(parsedContents),
        imposters = json.imposters;

    if (!imposters) {
        // Assume they left off the outer imposters array
        imposters = [json];
    }

    return putConfig(options, JSON.stringify({ imposters: imposters }));
}

function serverAt (options) {

    function start () {
        mountebank.create(options).then(function (server) {
            var shutdown = function shutdown () {
                server.close(function () {
                    try {
                        if (fs.existsSync(options.pidfile)) {
                            fs.unlinkSync(options.pidfile);
                        }
                    }
                    finally {
                        process.exit();
                    }
                });
            };

            process.on('SIGINT', shutdown);
            process.on('SIGTERM', shutdown);

            return loadConfig(options, server);
        }).then(function () {
            // Useful for build plugins that need to wait for mb to be fully initialized
            // They can wait for the pidfile to be written
            fs.writeFileSync(options.pidfile, process.pid.toString());
        }).done();
    }

    function stop () {
        if (!fs.existsSync(options.pidfile)) {
            return Q(true);
        }

        var pid = fs.readFileSync(options.pidfile);
        if (!processExists(pid)) {
            fs.unlinkSync(options.pidfile);
            return Q(true);
        }

        var deferred = Q.defer(),
            startTime = new Date(),
            timeout = 1000,
            waitForClose = function () {
                var elapsedTime = new Date() - startTime;

                if (!fs.existsSync(options.pidfile) || elapsedTime > timeout) {
                    deferred.resolve();
                }
                else {
                    setTimeout(waitForClose, 100);
                }
            };

        process.kill(pid);
        waitForClose();
        return deferred.promise;
    }

    function restart () {
        stop().then(start).done();
    }

    function save () {
        getConfig(options).then(function (response) {
            fs.writeFileSync(options.savefile, response.body);
        }).catch(function (err) {
            if (err.code === 'ECONNREFUSED') {
                console.error('No mb process running on port ' + options.port);
            }
            else {
                console.error(err);
            }
            process.exit(1);
        }).done();
    }

    function replay () {
        options.removeProxies = true;

        getConfig(options).then(function (response) {
            if (response.statusCode !== 200) {
                console.error('Received status code ' + response.statusCode);
                console.error(response.body);
                process.exit(1);
            }
            else {
                putConfig(options, response.body);
            }
        }).catch(function (err) {
            if (err.code === 'ECONNREFUSED') {
                console.error('No mb process running on port ' + options.port);
            }
            else {
                console.error(err);
            }
            process.exit(1);
        }).done();
    }

    return {
        start: start,
        stop: function () { stop().done(function () { process.exit(); }); },
        restart: restart,
        save: save,
        replay: replay
    };
}

var aliases = {
        d: 'debug',
        i: 'allowInjection',
        l: 'localOnly',
        si: 'saveImposters',
        m: 'mock',
        p: 'port',
        r: 'removeProxies',
        w: 'ipWhitelist'
    },
    options = {
        port: {
            default: 2525,
            description: 'the port to run the mountebank server on',
            nargs: 1,
            type: 'number',
            alias: aliases.p,
            global: false
        },
        configfile: {
            description: 'file to load imposters from, can be an EJS template',
            nargs: 1,
            type: 'string',
            global: false
        },
        noParse: {
            default: false,
            description: 'prevent rendering the configfile as an EJS template',
            type: 'boolean',
            global: false
        },
        pidfile: {
            default: 'mb.pid',
            description: 'where the pid is stored for the stop command',
            nargs: 1,
            type: 'string',
            global: false
        },
        nologfile: {
            default: false,
            description: 'prevent logging to the filesystem',
            type: 'boolean',
            global: false
        },
        logfile: {
            default: 'mb.log',
            description: 'file used for all log',
            nargs: 1,
            type: 'string',
            global: false
        },
        loglevel: {
            default: 'info',
            description: 'level for terminal logs',
            nargs: 1,
            type: 'string',
            choices: ['debug', 'info', 'warn', 'error'],
            global: false
        },
        allowInjection: {
            default: false,
            description: 'set to allow JavaScript injection',
            type: 'boolean',
            alias: aliases.i,
            global: false
        },
        localOnly: {
            default: false,
            description: 'allow connections only from localhost',
            type: 'boolean',
            alias: aliases.l,
            global: false
        },
        ipWhitelist: {
            default: '*',
            description: 'pipe-delimited list of allowed IP address patterns to connect to the mountebank admin port',
            type: 'string',
            alias: aliases.w,
            global: false
        },
        mock: {
            default: false,
            description: 'remember requests for mock verification',
            type: 'boolean',
            alias: aliases.m,
            global: false
        },
        debug: {
            default: false,
            description: 'include stub match information in imposter retrievals for debugging purposes',
            type: 'boolean',
            alias: aliases.d,
            global: false
        },
        savefile: {
            default: 'mb.json',
            description: 'file to save imposters to',
            nargs: 1,
            type: 'string',
            global: false
        },
        removeProxies: {
            default: false,
            description: 'removes proxies from the configuration when using the save command',
            type: 'boolean',
            alias: aliases.r,
            global: false
        },
        heroku: {
            default: false,
            type: 'boolean',
            global: false
        }
    },
    startOptions = {
        port: options.port,
        configfile: options.configfile,
        noParse: options.noParse,
        pidfile: options.pidfile,
        nologfile: options.nologfile,
        logfile: options.logfile,
        loglevel: options.loglevel,
        allowInjection: options.allowInjection,
        savefile: options.savefile,
        localOnly: options.localOnly,
        ipWhitelist: options.ipWhitelist,
        mock: options.mock,
        debug: options.debug,
        heroku: options.heroku
    };

var argv = yargs
    .usage('Usage: mb [command=start] [options...]')
    .command('start', 'Starts the server (default command)', function (startYargs) {
        startYargs
            .usage('Usage: mb [start] [options...]')
            .help('help')
            .wrap(null)
            .options(startOptions)
            .example('mb start --port 3000 --allowInjection --loglevel debug',
                'Starts on port 3000, allowing injections and turning on debug logging')
            .example('mb --ipWhitelist 192.168.1.20|192.158.1.21',
                'Starts on port 2525 with the given ip whitelist')
            .epilog('Note on the last example that start is assumed if no command is specified\n\nFor more information, see http://www.mbtest.org/docs/commandLine');
    })
    .command('stop', 'Stops the server', function (stopYargs) {
        stopYargs
            .usage('Usage: mb stop [--pidfile file.pid]')
            .help('help')
            .wrap(null)
            .options({ pidfile: options.pidfile })
            .example('mb stop', 'Stops the process identified in mb.pid')
            .example('mb stop --pidfile test.pid', 'Stops the process identified in test.pid')
            .epilog('For more information, see http://www.mbtest.org/docs/commandLine');
    })
    .command('restart', "Stops the server if it's running and restarts it", function (restartYargs) {
        restartYargs
            .usage('Usage: mb restart [options...]')
            .help('help')
            .wrap(null)
            .options(startOptions)
            .example('mb restart --port 3000 --allowInjection --loglevel debug',
                'Restarts on port 3000, allowing injections and turning on debug logging')
            .example('mb restart --pidfile test.pid', 'Stops the process identified in test.pid and restarts on port 2525')
            .epilog('The port does not have to match the currently running instance, but the pidfile must match\n\nFor more information, see http://www.mbtest.org/docs/commandLine');
    })
    .command('save', 'Saves current imposter configuration to a config file', function (saveYargs) {
        saveYargs
            .usage('Usage: mb save [options...]\n\nSaves a snapshot of your configuration, including new responses created by proxies')
            .help('help')
            .wrap(null)
            .options({
                port: options.port,
                savefile: options.savefile,
                removeProxies: options.removeProxies
            })
            .example('mb save --savefile config.json --removeProxies --port 3000',
                'Saves the config without proxies into config.json by querying port 3000')
            .example('mb save', 'Saves the config as is into mb.json by querying port 2525')
            .epilog('For more information, see http://www.mbtest.org/docs/commandLine');
    })
    .command('replay',
        'Switches from record mode to replay by removing proxies',
        function (replayYargs) {
            replayYargs
                .usage('Usage: mb replay [--port 3000]')
                .help('help')
                .wrap(null)
                .options({ port: options.port })
                .example('mb replay --port 3000',
                    'Resets the configuration of mountebank running on port 3000 to remove all proxies')
                .example('mb replay', 'Resets the configuration of mountebank running on port 2525 to remove all proxies')
                .epilog('For more information, see http://www.mbtest.org/docs/commandLine');
        })
    .version()
    .wrap(null)
    .epilog('mb help [command] provides more details\n\nFor more information, see http://www.mbtest.org/docs/commandLine')
    .argv;

function fixAliases () {
    Object.keys(argv).forEach(function (key) {
        if (aliases[key]) {
            argv[aliases[key]] = argv[key];
            delete argv[key];
        }
    });
}

// Unfortunately, while yargs defaults correctly when the command is present, I couldn't
// figure out how to make it default when the command is absent, which I need to default to start.
// You can set what yargs considers to be the default command by .command(['start', '*']), but
// that changes the help docs in ways I don't want.
function fixDefaults () {
    if (argv._.length === 0) {
        Object.keys(startOptions).forEach(function (key) {
            if (typeof argv[key] === 'undefined') {
                argv[key] = startOptions[key].default;
            }
        });
    }
}

function fixIPWhitelist (command) {
    if (command === 'start' || command === 'restart') {
        argv.ipWhitelist = argv.ipWhitelist.split('|');
    }
}

// Prevent noise from being logged
function removeNoise () {
    delete argv._;
    delete argv.$0;
    delete argv.version;
}

try {
    var command = argv._.length === 0 ? 'start' : argv._[0],
        server = serverAt(argv);

    fixAliases();
    fixDefaults();
    fixIPWhitelist(command);
    removeNoise();

    switch (command) {
        case 'start':
            server.start();
            break;
        case 'stop':
            server.stop();
            break;
        case 'restart':
            server.restart();
            break;
        case 'save':
            server.save();
            break;
        case 'replay':
            server.replay();
            break;
        case 'help':
            yargs.showHelp();
            break;
        default:
            error("Invalid command '" + command + "'.");
            break;
    }
}
catch (err) {
    error(err.message);
}
